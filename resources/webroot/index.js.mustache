// eslint-disable-next-line no-unused-vars
/* global L i18n ga adsbygoogle:writable */

let map

let lastUpdateServer = 0

let lastUpdate = 0
let isLoading = false

let pokestopMarkers = []
let gymMarkers = []
let pokemonMarkers = []
let spawnpointMarkers = []
let cellMarkers = []
let submissionPlacementCellMarkers = []
let submissionPlacementRingMarkers = []
let submissionTypeCellMarkers = []
let weatherMarkers = []
let deviceMarkers = []

let pokemonFilter = {}
let pokemonFilterNew = {}

let questFilter = {}
let questFilterNew = {}

let raidFilter = {}
let raidFilterNew = {}

let gymFilter = {}
let gymFilterNew = {}

let pokestopFilter = {}
let pokestopFilterNew = {}

let spawnpointFilter = {}
let spawnpointFilterNew = {}

const hiddenPokemonIds = []

let openedPokemon
let openedPokestop
let openedGym
let openedCell
let openedSubmissionTypeCell
let openedWeather
let openedDevice

let showPokestops
let showQuests
let showGyms
let showRaids
let showPokemon
let showSpawnpoints
let showCells
let showWeathers
let showDevices
let showRaidTimers
let showSubmissionCells

let showGreatLeague
let showUltraLeague

let avilableForms = []
let avilableItems = []
let avilableTileservers = {}
let selectedTileserver = 'Default'

let pokemonFilterLoaded = false
let questFilterLoaded = false
let raidFilterLoaded = false
let gymFilterLoaded = false
let pokestopFilterLoaded = false
let spawnpointFilterLoaded = false

let deviceOnlineIcon
let deviceOfflineIcon

let tileLayer

let pokemonDb = {}
let weatherTypes = {}

document.addEventListener('gesturestart', function (e) {
    e.preventDefault();
});

$(function () {
  L.Marker.addInitHook(function () {
    if (this.options.virtual) {
      this.on('add', function () {
        this._updateIconVisibility = function () {
          if (!this._map) {
            return
          }
          var map = this._map
          var isVisible = map.getBounds().contains(this.getLatLng())
          var wasVisible = this._wasVisible
          var icon = this._icon
          var iconParent = this._iconParent
          var shadow = this._shadow
          var shadowParent = this._shadowParent

          if (!iconParent) {
            iconParent = this._iconParent = icon.parentNode
          }
          if (shadow && !shadowParent) {
            shadowParent = this._shadowParent = shadow.parentNode
          }

          if (isVisible !== wasVisible) {
            if (isVisible) {
              iconParent.appendChild(icon)
              if (shadow) {
                shadowParent.appendChild(shadow)
              }
            } else {
              iconParent.removeChild(icon)
              if (shadow) {
                shadowParent.removeChild(shadow)
              }
            }

            this._wasVisible = isVisible
          }
        }

        this._map.on('resize moveend zoomend', this._updateIconVisibility, this)
        this._updateIconVisibility()
      }, this)
    }
  })

  deviceOnlineIcon = L.icon({
    iconUrl: '/static/img/device/0.png',
    iconSize: [30, 30],
    iconAnchor: [30 / 2, 30 / 2],
    popupAnchor: [0, 30 * -1.567]
  })
  deviceOfflineIcon = L.icon({
    iconUrl: '/static/img/device/1.png',
    iconSize: [30, 30],
    iconAnchor: [30 / 2, 30 / 2],
    popupAnchor: [0, 30 * -1.567]
  })

  $.getJSON('/static/data/{{{locale}}}.json', { _: '{{{locale_last_modified}}}' }, function (data) {
    i18n.translator.add(data)
    initPreview()
  })

  $.getJSON('/static/data/pokemon.json', function (data) {
    pokemonDb = data
  })

  $.getJSON('/static/data/weathertypes.json', function (data) {
    weatherTypes = data
  })

  avilableForms = JSON.parse('{{{avilable_forms_json}}}')
  avilableItems = JSON.parse('{{{avilable_items_json}}}')
  avilableTileservers = JSON.parse('{{{avilable_tileservers_json}}}')

  loadStorage()

  const avilableTileserverKeys = []
  for (var avilableTileserverKey in avilableTileservers) {
    avilableTileserverKeys.push(avilableTileserverKey)
  }
  avilableTileserverKeys.sort()
  $('#select-mapstyle').append($('<option>', {
    value: 'Default',
    text: 'Default',
    selected: selectedTileserver === 'Default'
  }))
  for (var i = 0; i < avilableTileserverKeys.length; i++) {
    const key = avilableTileserverKeys[i]
    if (key !== 'Default') {
      $('#select-mapstyle').append($('<option>', {
        value: key,
        text: key,
        selected: key === selectedTileserver
      }))
    }
  }

  $('#settingsModal').on('show.bs.modal', function () {
    pokemonFilterNew = $.extend(true, {}, pokemonFilter)
    questFilterNew = $.extend(true, {}, questFilter)
    raidFilterNew = $.extend(true, {}, raidFilter)
    gymFilterNew = $.extend(true, {}, gymFilter)
    pokestopFilterNew = $.extend(true, {}, pokestopFilter)
    spawnpointFilterNew = $.extend(true, {}, spawnpointFilter)

    $('.select-button').each(function () {
      manageSelectButton($(this), false)
    })
    $('.configure-button').each(function () {
      manageConfigureButton($(this), false)
    })

    if (!pokemonFilterLoaded) {
      pokemonFilterLoaded = true
      loadPokemonFilter()
    }

    if (!questFilterLoaded) {
      questFilterLoaded = true
      loadQuestFilter()
    }

    if (!raidFilterLoaded) {
      raidFilterLoaded = true
      loadRaidFilter()
    }

    if (!gymFilterLoaded) {
      gymFilterLoaded = true
      loadGymFilter()
    }

    if (!pokestopFilterLoaded) {
      pokestopFilterLoaded = true
      loadPokestopFilter()
    }

    if (!spawnpointFilterLoaded) {
      spawnpointFilterLoaded = true
      loadSpawnpointFilter()
    }
  })

  initMap()

  $('#select-mapstyle').on('change', function () {
    selectedTileserver = this.value
    store('tileserver', this.value)
    map.removeLayer(tileLayer)

    let scale = ''
    if (L.Browser.retina) {
      scale = '@2x'
    }
    tileLayer = L.tileLayer(avilableTileservers[selectedTileserver].url, {
      attribution: avilableTileservers[selectedTileserver].attribution,
      minZoom: '{{min_zoom}}',
      maxZoom: '{{max_zoom}}',
      scale: scale,
      hq: L.Browser.retina
    })
    tileLayer.addTo(map)
  })

  $('#exportSettings').on('click', function () {
    var settings = {
      show_gyms: showGyms,
      show_raids: showRaids,
      show_pokemon: showPokemon,
      show_quests: showQuests,
      show_pokestops: showPokestops,
      show_spawnpoints: showSpawnpoints,
      show_cells: showCells,
      show_submission_cells: showSubmissionCells,
      show_weathers: showWeathers,
      gym: gymFilterNew,
      raid: raidFilterNew,
      pokemon: pokemonFilterNew,
      quest: questFilterNew,
      pokestop: pokestopFilterNew,
      spawnpoint: spawnpointFilterNew
    }
    var json = JSON.stringify(settings)
    var el = document.createElement('a')
    el.setAttribute('href', 'data:text/plain;chartset=utf-8,' + encodeURIComponent(json))
    el.setAttribute('download', 'settings.json')
    el.style.display = 'none'
    document.body.appendChild(el)
    el.click()
    document.body.removeChild(el)
  })

  $('#importSettings').on('click', function () {
    $('#importSettingsFile').click()
  })

  document.getElementById('importSettingsFile').addEventListener('change', loadFilterSettings, false)

  // If you see this: Don't tell anyone
  var d = new Date()
  if (d.getMonth() === 11 && d.getDate() >= 24 && d.getDate() <= 30) {
    const snow = '<div class="winter-is-coming">\n' +
            '            <div class="snow snow--near"></div>\n' +
            '            <div class="snow snow--near snow--alt"></div>\n' +
            '            <div class="snow snow--mid"></div>\n' +
            '            <div class="snow snow--mid snow--alt"></div>\n' +
            '            <div class="snow snow--far"></div>\n' +
            '            <div class="snow snow--far snow--alt"></div>\n' +
            '        </div>'
    $('#map').append(snow)
  }

  if ((d.getMonth() === 11 && d.getDate() >= 31) || (d.getMonth() === 0 && d.getDate() <= 1)) {
    const fireworks = '<div class="pyro">' +
        '<div class="before"></div>' +
        '<div class="after"></div>' +
        '</div>'
    $('#map').append(fireworks)
  }

  if (d.getMonth() === 1 && d.getDate() === 14) {
    const valentine = '<canvas id="valentine-canvas"></canvas>'
    $('#map').append(valentine)
    var hearts = {
      heartHeight: 15,
      heartWidth: 15,
      hearts: [],
      heartImage: 'https://pngimage.net/wp-content/uploads/2018/06/heart-png-images.png',
      maxHearts: 30,
      minScale: 0.3,
      draw: function () {
        this.setCanvasSize()
        this.ctx.clearRect(0, 0, this.w, this.h)
        for (var i = 0; i < this.hearts.length; i++) {
          var heart = this.hearts[i]
          heart.image = new Image()
          heart.image.style.height = heart.height
          heart.image.src = this.heartImage
          this.ctx.globalAlpha = heart.opacity
          this.ctx.drawImage(heart.image, heart.x, heart.y, heart.width, heart.height)
        }
        this.move()
      },
      move: function () {
        for (var b = 0; b < this.hearts.length; b++) {
          var heart = this.hearts[b]
          heart.y += heart.ys
          if (heart.y > this.h) {
            heart.x = Math.random() * this.w
            heart.y = -1 * this.heartHeight
          }
        }
      },
      setCanvasSize: function () {
        this.canvas.width = window.innerWidth
        this.canvas.height = window.innerHeight
        this.w = this.canvas.width
        this.h = this.canvas.height
      },
      initialize: function () {
        this.canvas = $('#valentine-canvas')[0]
        if (!this.canvas.getContext) {
          return
        }
        this.setCanvasSize()
        this.ctx = this.canvas.getContext('2d')
        for (var a = 0; a < this.maxHearts; a++) {
          var scale = (Math.random() * (1 - this.minScale)) + this.minScale
          this.hearts.push({
            x: Math.random() * this.w,
            y: Math.random() * this.h,
            ys: Math.random() + 1,
            height: scale * this.heartHeight,
            width: scale * this.heartWidth,
            opacity: scale
          })
        }
        setInterval($.proxy(this.draw, this), 30)
      }
    }
    hearts.initialize()
  }

  // eslint-disable-next-line no-constant-condition
  if ('{{google_analytics_id}}' !== 'false') {
    window.ga = window.ga || function () {
      (ga.q = ga.q || []).push(arguments)
    }
    ga.l = +new Date()
    ga('create', '{{google_analytics_id}}', 'auto')
    ga('send', 'pageview')
  }

  // eslint-disable-next-line no-constant-condition
  if ('{{google_adsense_id}}' !== 'false') {
    (adsbygoogle = window.adsbygoogle || []).push({
      google_ad_client: '{{google_adsense_id}}',
      enable_page_level_ads: true
    })
  }
})

// MARK: - Setup

function loadStorage () {
  const selectedTileserverTmp = retrieve('tileserver')
  if (selectedTileserverTmp === undefined) {
    selectedTileserver = 'Default'
  } else {
    if (avilableTileservers[selectedTileserverTmp] === undefined) {
      selectedTileserver = 'Default'
    } else {
      selectedTileserver = selectedTileserverTmp
    }
  }

  const showGymsValue = retrieve('show_gyms')
  if (showGymsValue === null) {
    store('show_gyms', true)
    showGyms = true
  } else {
    showGyms = (showGymsValue === 'true')
  }

  const showRaidsValue = retrieve('show_raids')
  if (showRaidsValue === null) {
    store('show_raids', true)
    showRaids = true
  } else {
    showRaids = (showRaidsValue === 'true')
  }

  const showPokestopsValue = retrieve('show_pokestops')
  if (showPokestopsValue === null) {
    store('show_pokestops', false)
    showPokestops = false
  } else {
    showPokestops = (showPokestopsValue === 'true')
  }

  const showQuestsValue = retrieve('show_quests')
  if (showQuestsValue === null) {
    store('show_quests', true)
    showQuests = true
  } else {
    showQuests = (showQuestsValue === 'true')
  }

  const showSpawnpointsValue = retrieve('show_spawnpoints')
  if (showSpawnpointsValue === null) {
    store('show_spawnpoints', false)
    showSpawnpoints = false
  } else {
    showSpawnpoints = (showSpawnpointsValue === 'true')
  }

  const showPokemonValue = retrieve('show_pokemon')
  if (showPokemonValue === null) {
    store('show_pokemon', true)
    showPokemon = true
  } else {
    showPokemon = (showPokemonValue === 'true')
  }

  const showSubmissionCellsValue = retrieve('show_submission_cells')
  if (showSubmissionCellsValue === null) {
    store('show_submission_cells', false)
    showSubmissionCells = false
  } else {
    showSubmissionCells = (showSubmissionCellsValue === 'true')
  }

  const showCellsValue = retrieve('show_cells')
  if (showCellsValue === null) {
    store('show_cells', false)
    showCells = false
  } else {
    showCells = (showCellsValue === 'true')
  }

  const showWeathersValue = retrieve('show_weathers')
  if (showWeathersValue === null) {
    store('show_weathers', false)
    showWeathers = false
  } else {
    showWeathers = (showWeathersValue === 'true')
  }

  const showDevicesValue = retrieve('show_devices')
  if (showDevicesValue === null) {
    store('show_devices', false)
    showDevices = false
  } else {
    showDevices = (showDevicesValue === 'true')
  }

  const pokemonFilterValue = retrieve('pokemon_filter')
  if (pokemonFilterValue === null) {
    const defaultPokemonFilter = {}
    let i
    for (i = 1; i <= '{{max_pokemon_id}}'; i++) {
      defaultPokemonFilter[i] = { show: true, size: 'normal' }
    }
    defaultPokemonFilter.iv_and = { on: false, filter: '0-100' }
    defaultPokemonFilter.iv_or = { on: false, filter: '0-100' }

    store('pokemon_filter', JSON.stringify(defaultPokemonFilter))
    pokemonFilter = defaultPokemonFilter
  } else {
    pokemonFilter = JSON.parse(pokemonFilterValue)
    let i
    for (i = 1; i <= '{{max_pokemon_id}}'; i++) {
      if (pokemonFilter[i] === undefined) {
        pokemonFilter[i] = { show: true, size: 'normal' }
      }
    }
    if (pokemonFilter.iv_and === undefined) {
      pokemonFilter.iv_and = { on: false, filter: '0-100' }
    }
    if (pokemonFilter.iv_or === undefined) {
      pokemonFilter.iv_or = { on: false, filter: '0-100' }
    }
    store('pokemon_filter', JSON.stringify(pokemonFilter))
  }

  const questFilterValue = retrieve('quest_filter')
  if (questFilterValue === null) {
    const defaultQuestFilter = {}
    let i
    for (i = 1; i <= '{{max_pokemon_id}}'; i++) {
      defaultQuestFilter['p' + i] = { show: true, size: 'normal' }
    }
    $.each(avilableItems, function (index, itemId) {
      defaultQuestFilter['i' + itemId] = { show: true, size: 'normal' }
    })

    store('quest_filter', JSON.stringify(defaultQuestFilter))
    questFilter = defaultQuestFilter
  } else {
    questFilter = JSON.parse(questFilterValue)
    let i
    for (i = 1; i <= '{{max_pokemon_id}}'; i++) {
      if (questFilter['p' + i] === undefined) {
        questFilter['p' + i] = { show: true, size: 'normal' }
      }
    }
    $.each(avilableItems, function (index, itemId) {
      if (questFilter['i' + itemId] === undefined) {
        questFilter['i' + itemId] = { show: true, size: 'normal' }
      }
    })
    store('quest_filter', JSON.stringify(questFilter))
  }

  const raidFilterValue = retrieve('raid_filter')
  if (raidFilterValue === null) {
    const defaultRaidFilter = {}
    if (defaultRaidFilter.timers === undefined) {
      defaultRaidFilter.timers = { show: true, size: 'normal' }
    }
    let i
    for (i = 1; i <= 5; i++) {
      if (defaultRaidFilter['l' + i] === undefined) {
        defaultRaidFilter['l' + i] = { show: true, size: 'normal' }
      }
    }
    for (i = 1; i <= '{{max_pokemon_id}}'; i++) {
      if (defaultRaidFilter['p' + i] === undefined) {
        defaultRaidFilter['p' + i] = { show: true, size: 'normal' }
      }
    }

    store('raid_filter', JSON.stringify(defaultRaidFilter))
    raidFilter = defaultRaidFilter
  } else {
    raidFilter = JSON.parse(raidFilterValue)
    if (raidFilter.timers === undefined) {
      raidFilter.timers = { show: true, size: 'normal' }
      showRaidTimers = true
    } else {
      showRaidTimers = raidFilter.timers.show
    }
    let i
    for (i = 1; i <= 5; i++) {
      if (raidFilter['l' + i] === undefined) {
        raidFilter['l' + i] = { show: true, size: 'normal' }
      }
    }
    for (i = 1; i <= '{{max_pokemon_id}}'; i++) {
      if (raidFilter['p' + i] === undefined) {
        raidFilter['p' + i] = { show: true, size: 'normal' }
      }
    }
  }

  const gymFilterValue = retrieve('gym_filter')
  if (gymFilterValue === null) {
    const defaultGymFilter = {}
    let i
    for (i = 0; i <= 3; i++) {
      if (defaultGymFilter['t' + i] === undefined) {
        defaultGymFilter['t' + i] = { show: true, size: 'normal' }
      }
    }
    if (defaultGymFilter.ex === undefined) {
      defaultGymFilter.ex = { show: false, size: 'normal' }
    }
    for (i = 0; i <= 6; i++) {
      if (defaultGymFilter['s' + i] === undefined) {
        defaultGymFilter['s' + i] = { show: true, size: 'normal' }
      }
    }

    store('gym_filter', JSON.stringify(defaultGymFilter))
    gymFilter = defaultGymFilter
  } else {
    gymFilter = JSON.parse(gymFilterValue)
    let i
    for (i = 0; i <= 3; i++) {
      if (gymFilter['t' + i] === undefined) {
        gymFilter['t' + i] = { show: true, size: 'normal' }
      }
    }
    if (gymFilter.ex === undefined) {
      gymFilter.ex = { show: false, size: 'normal' }
    }
    for (i = 0; i <= 6; i++) {
      if (gymFilter['s' + i] === undefined) {
        gymFilter['s' + i] = { show: true, size: 'normal' }
      }
    }
  }

  const pokestopFilterValue = retrieve('pokestop_filter')
  if (pokestopFilterValue === null) {
    const defaultPokestopFilter = {}
    if (defaultPokestopFilter.normal === undefined) {
      defaultPokestopFilter.normal = { show: true, size: 'normal' }
    }
    let i
    for (i = 1; i < 5; i++) {
      if (defaultPokestopFilter['l' + i] === undefined) {
        defaultPokestopFilter['l' + i] = { show: true, size: 'normal' }
      }
    }
    if (defaultPokestopFilter.invasion === undefined) {
      defaultPokestopFilter.invasion = { show: true, size: 'normal' }
    }

    store('pokestop_filter', JSON.stringify(defaultPokestopFilter))
    pokestopFilter = defaultPokestopFilter
  } else {
    pokestopFilter = JSON.parse(pokestopFilterValue)
    if (pokestopFilter.normal === undefined) {
      pokestopFilter.normal = { show: true, size: 'normal' }
    }
    let i
    for (i = 1; i < 5; i++) {
      if (pokestopFilter['l' + i] === undefined) {
        pokestopFilter['l' + i] = { show: true, size: 'normal' }
      }
    }
    if (pokestopFilter.invasion === undefined) {
      pokestopFilter.invasion = { show: true, size: 'normal' }
    }
  }

  const spawnpointFilterValue = retrieve('spawnpoint_filter')
  if (spawnpointFilterValue === null) {
    const defaultSpawnpointFilter = {}
    if (defaultSpawnpointFilter['no-timer'] === undefined) {
      defaultSpawnpointFilter['no-timer'] = { show: true, size: 'normal' }
    }
    if (defaultSpawnpointFilter['with-timer'] === undefined) {
      defaultSpawnpointFilter['with-timer'] = { show: true, size: 'normal' }
    }

    store('spawnpoint_filter', JSON.stringify(defaultSpawnpointFilter))
    spawnpointFilter = defaultSpawnpointFilter
  } else {
    spawnpointFilter = JSON.parse(spawnpointFilterValue)
    if (spawnpointFilter['no-timer'] === undefined) {
      spawnpointFilter['no-timer'] = { show: true, size: 'normal' }
    }
    if (spawnpointFilter['with-timer'] === undefined) {
      spawnpointFilter['with-timer'] = { show: true, size: 'normal' }
    }
  }

  const showGreatLeagueValue = retrieve('show_great_league')
  if (showGreatLeagueValue === null) {
    store('show_great_league', false)
    showGreatLeague = false
  } else {
    showGreatLeague = (showGreatLeagueValue === 'true')
  }

  const showUltraLeagueValue = retrieve('show_ultra_league')
  if (showUltraLeagueValue === null) {
    store('show_ultra_league', false)
    showUltraLeague = false
  } else {
    showUltraLeague = (showUltraLeagueValue === 'true')
  }
}

function initPreview () {
  const ts = Math.round((new Date()).getTime() / 1000)
  try {
    let startPokemon = JSON.parse(decodeURIComponent('{{{start_pokemon}}}'))
    startPokemon.is_start = true
    addPokemon(startPokemon, ts)
  } catch(e) {
    // No Start Pokemon
  }
  try {
    let startPokestop = JSON.parse(decodeURIComponent('{{{start_pokestop}}}'))
    startPokestop.is_start = true
    addPokestop(startPokestop, ts)
  } catch(e) {
    // No Start Pokestop
  }
  try {
    let startGym = JSON.parse(decodeURIComponent('{{{start_gym}}}'))
    startGym.is_start = true
    addGym(startGym, ts)
  } catch(e) {
    // No Start Gym
  }
}

function initMap () {
  map = L.map('map', {
    preferCanvas: true,
    worldCopyJump: true,
    updateWhenIdle: true,
    updateWhenZooming: false
  }).setView(['{{start_lat}}', '{{start_lon}}'], '{{start_zoom}}')

  let scale = ''
  if (L.Browser.retina) {
    scale = '@2x'
  }
  tileLayer = L.tileLayer(avilableTileservers[selectedTileserver].url, {
    attribution: avilableTileservers[selectedTileserver].attribution,
    minZoom: '{{min_zoom}}',
    maxZoom: '{{max_zoom}}',
    scale: scale,
    hq: L.Browser.retina
  })
  tileLayer.addTo(map)

  const CustomControlLocation = L.Control.extend({
    options: {
      position: 'topleft'
    },
    onAdd: function (map) {
      const container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom')

      container.innerHTML = '<a href="#"><img src="/static/svg/location.svg" style="width: 21px; height: 21px; class="center-block;"/></a>'

      container.onclick = function () {
        map.locate({ setView: true, maxZoom: 16 })
      }
      return container
    }
  })
  map.addControl(new CustomControlLocation())

  $('#reset-pokemon-filter').on('click', function () {
    const defaultPokemonFilter = []
    let i
    for (i = 1; i <= '{{max_pokemon_id}}'; i++) {
      defaultPokemonFilter[i] = { show: true, size: 'normal' }
    }
    defaultPokemonFilter.iv_and = { on: false, filter: '0-100' }
    defaultPokemonFilter.iv_or = { on: false, filter: '0-100' }

    store('pokemon_filter', JSON.stringify(defaultPokemonFilter))
    pokemonFilterNew = defaultPokemonFilter

    $('#table-filter-pokemon').DataTable().rows().invalidate('data').draw(false)
  })

  $('#disable-all-pokemon-filter').on('click', function () {
    const defaultPokemonFilter = []
    let i
    for (i = 1; i <= '{{max_pokemon_id}}'; i++) {
      defaultPokemonFilter[i] = { show: false, size: pokemonFilterNew[i].size, filter: pokemonFilterNew[i].filter }
    }
    defaultPokemonFilter.iv_and = { on: false, filter: pokemonFilterNew.iv_and.filter }
    defaultPokemonFilter.iv_or = { on: false, filter: pokemonFilterNew.iv_or.filter }

    store('pokemon_filter', JSON.stringify(defaultPokemonFilter))
    pokemonFilterNew = defaultPokemonFilter

    $('#table-filter-pokemon').DataTable().rows().invalidate('data').draw(false)
  })

  $('#reset-quest-filter').on('click', function () {
    const defaultQuestFilter = {}
    let i
    for (i = 1; i <= '{{max_pokemon_id}}'; i++) {
      defaultQuestFilter['p' + i] = { show: true, size: 'normal' }
    }
    $.each(avilableItems, function (index, itemId) {
      defaultQuestFilter['i' + itemId] = { show: true, size: 'normal' }
    })

    store('quest_filter', JSON.stringify(defaultQuestFilter))
    questFilterNew = defaultQuestFilter

    $('#table-filter-quest').DataTable().rows().invalidate('data').draw(false)
  })

  $('#disable-all-quest-filter').on('click', function () {
    const defaultQuestFilter = {}
    let i
    for (i = 1; i <= '{{max_pokemon_id}}'; i++) {
      defaultQuestFilter['p' + i] = { show: false, size: questFilterNew['p' + i].size }
    }
    $.each(avilableItems, function (index, itemId) {
      defaultQuestFilter['i' + itemId] = { show: false, size: questFilterNew['i' + itemId].size }
    })

    store('quest_filter', JSON.stringify(defaultQuestFilter))
    questFilterNew = defaultQuestFilter

    $('#table-filter-quest').DataTable().rows().invalidate('data').draw(false)
  })

  $('#reset-raid-filter').on('click', function () {
    const defaultRaidFilter = {}
    defaultRaidFilter.timers = { show: true, size: 'normal' }
    let i
    for (i = 1; i <= 5; i++) {
      defaultRaidFilter['l' + i] = { show: true, size: 'normal' }
    }
    for (i = 1; i <= '{{max_pokemon_id}}'; i++) {
      defaultRaidFilter['p' + i] = { show: true, size: 'normal' }
    }

    store('raid_filter', JSON.stringify(defaultRaidFilter))
    raidFilterNew = defaultRaidFilter

    $('#table-filter-raid').DataTable().rows().invalidate('data').draw(false)
  })

  $('#disable-all-raid-filter').on('click', function () {
    const defaultRaidFilter = {}
    defaultRaidFilter.timers = { show: false, size: raidFilterNew.timers.size }
    let i
    for (i = 1; i <= 5; i++) {
      defaultRaidFilter['l' + i] = { show: false, size: raidFilterNew['l' + i].size }
    }
    for (i = 1; i <= '{{max_pokemon_id}}'; i++) {
      defaultRaidFilter['p' + i] = { show: false, size: 'normal' }
    }

    store('raid_filter', JSON.stringify(defaultRaidFilter))
    raidFilterNew = defaultRaidFilter

    $('#table-filter-raid').DataTable().rows().invalidate('data').draw(false)
  })

  $('#reset-gym-filter').on('click', function () {
    const defaultGymFilter = {}
    let i
    for (i = 0; i <= 3; i++) {
      defaultGymFilter['t' + i] = { show: true, size: 'normal' }
    }
    defaultGymFilter.ex = { show: false, size: 'normal' }
    for (i = 0; i <= 6; i++) {
      defaultGymFilter['s' + i] = { show: true, size: 'normal' }
    }

    store('gym_filter', JSON.stringify(defaultGymFilter))
    gymFilterNew = defaultGymFilter

    $('#table-filter-gym').DataTable().rows().invalidate('data').draw(false)
  })

  $('#disable-all-gym-filter').on('click', function () {
    const defaultGymFilter = {}
    let i
    for (i = 0; i <= 3; i++) {
      defaultGymFilter['t' + i] = { show: false, size: gymFilterNew['t' + i].size }
    }
    defaultGymFilter.ex = { show: false, size: gymFilterNew.ex.size }
    for (i = 0; i <= 6; i++) {
      defaultGymFilter['s' + i] = { show: false, size: gymFilterNew['s' + i].size }
    }

    store('gym_filter', JSON.stringify(defaultGymFilter))
    gymFilterNew = defaultGymFilter

    $('#table-filter-gym').DataTable().rows().invalidate('data').draw(false)
  })

  $('#reset-pokestop-filter').on('click', function () {
    const defaultPokestopFilter = {}
    defaultPokestopFilter.normal = { show: true, size: 'normal' }
    for (var i = 1; i < 5; i++) {
      defaultPokestopFilter['l' + i] = { show: true, size: 'normal' }
    }
    defaultPokestopFilter.invasion = { show: true, size: 'normal' }

    store('pokestop_filter', JSON.stringify(defaultPokestopFilter))
    pokestopFilterNew = defaultPokestopFilter

    $('#table-filter-pokestop').DataTable().rows().invalidate('data').draw(false)
  })

  $('#disable-all-pokestop-filter').on('click', function () {
    const defaultPokestopFilter = {}
    defaultPokestopFilter.normal = { show: false, size: pokestopFilterNew.normal.size }
    for (var i = 1; i < 5; i++) {
      defaultPokestopFilter['l' + i] = { show: false, size: pokestopFilterNew['l' + i].size }
    }
    defaultPokestopFilter.invasion = { show: false, size: pokestopFilterNew.invasion.size }

    store('pokestop_filter', JSON.stringify(defaultPokestopFilter))
    pokestopFilterNew = defaultPokestopFilter

    $('#table-filter-pokestop').DataTable().rows().invalidate('data').draw(false)
  })

  $('#reset-spawnpoint-filter').on('click', function () {
    const defaultSpawnpointFilter = {}
    defaultSpawnpointFilter['no-timer'] = { show: true, size: 'normal' }
    defaultSpawnpointFilter['with-timer'] = { show: true, size: 'normal' }

    store('spawnpoint_filter', JSON.stringify(defaultSpawnpointFilter))
    spawnpointFilterNew = defaultSpawnpointFilter

    $('#table-filter-spawnpoint').DataTable().rows().invalidate('data').draw(false)
  })

  $('#disable-all-spawnpoint-filter').on('click', function () {
    const defaultSpawnpointFilter = {}
    defaultSpawnpointFilter['no-timer'] = { show: false, size: spawnpointFilterNew['no-timer'].size }
    defaultSpawnpointFilter['with-timer'] = { show: false, size: spawnpointFilterNew['with-timer'].size }

    store('spawnpoint_filter', JSON.stringify(defaultSpawnpointFilter))
    spawnpointFilterNew = defaultSpawnpointFilter

    $('#table-filter-spawnpoint').DataTable().rows().invalidate('data').draw(false)
  })

  $('#saveSettings').on('click', function () {
    $(this).toggleClass('active')

    const newShowGyms = $('#show-gyms').hasClass('active')
    const newShowRaids = $('#show-raids').hasClass('active')
    const newShowPokestops = $('#show-pokestops').hasClass('active')
    const newShowQuests = $('#show-quests').hasClass('active')
    const newShowPokemon = $('#show-pokemon').hasClass('active')
    const newShowSpawnpoints = $('#show-spawnpoints').hasClass('active')
    const newShowCells = $('#show-cells').hasClass('active')
    const newShowSubmissionCells = $('#show-submission-cells').hasClass('active')
    const newShowWeathers = $('#show-weathers').hasClass('active')
    const newShowDevices = $('#show-devices').hasClass('active')

    const ts = Math.round((new Date()).getTime() / 1000)

    if (newShowGyms !== showGyms && newShowGyms === false) {
      const newGymMarkers = []
      $.each(gymMarkers, function (index, gym) {
        if (gym.is_start || (newShowRaids && gym.raid_end_timestamp >= ts)) {
          newGymMarkers.push(gym)
        } else {
          map.removeLayer(gym.marker)
        }
      })
      gymMarkers = newGymMarkers
    }
    if (newShowPokemon !== showPokemon) {
      const newPokemonMarkers = []
      $.each(pokemonMarkers, function (index, pokemon) {
        if (pokemon.is_start) {
          newPokemonMarkers.push(pokemon)
        } else {
          map.removeLayer(pokemon.marker)
        }
      })
      pokemonMarkers = newPokemonMarkers
    }
    if (newShowRaids !== showRaids) {
      const newGymMarkers = []
      $.each(gymMarkers, function (index, gym) {
        if (gym.is_start) {
          newGymMarkers.push(gym)
        } else {
          map.removeLayer(gym.marker)
        }
      })
      gymMarkers = newGymMarkers
    }
    if (newShowPokestops !== showPokestops && newShowPokestops === false) {
      const newPokestopMarkers = []
      $.each(pokestopMarkers, function (index, pokestop) {
        if (pokestop.is_start) {
          newPokestopMarkers.push(pokestop)
        } else {
          map.removeLayer(pokestop.marker)
        }
      })
      pokestopMarkers = newPokestopMarkers
    }
    if (newShowQuests !== showQuests) {
      const newPokestopMarkers = []
      $.each(pokestopMarkers, function (index, pokestop) {
        if (pokestop.is_start) {
          newPokestopMarkers.push(pokestop)
        } else {
          map.removeLayer(pokestop.marker)
        }
      })
      pokestopMarkers = newPokestopMarkers
    }
    if (newShowSpawnpoints !== showSpawnpoints && newShowSpawnpoints === false) {
      $.each(spawnpointMarkers, function (index, spawnpoint) {
        map.removeLayer(spawnpoint.marker)
      })
      spawnpointMarkers = []
    }
    if (newShowCells !== showCells && newShowCells === false) {
      $.each(cellMarkers, function (index, cell) {
        map.removeLayer(cell.marker)
      })
      cellMarkers = []
    }
    if (newShowSubmissionCells !== showSubmissionCells && newShowSubmissionCells === false) {
      $.each(submissionPlacementCellMarkers, function (index, cell) {
        map.removeLayer(cell.marker)
      })
      submissionPlacementCellMarkers = []
      $.each(submissionPlacementRingMarkers, function (index, ring) {
        map.removeLayer(ring.marker)
      })
      submissionPlacementRingMarkers = []
      $.each(submissionTypeCellMarkers, function (index, cell) {
        map.removeLayer(cell.marker)
      })
      submissionTypeCellMarkers = []
    }
    if (newShowWeathers !== showWeathers && newShowWeathers === false) {
      $.each(weatherMarkers, function (index, weather) {
        map.removeLayer(weather.marker)
      })
      weatherMarkers = []
    }
    if (newShowDevices !== showDevices && newShowDevices === false) {
      $.each(deviceMarkers, function (index, device) {
        map.removeLayer(device.marker)
      })
      deviceMarkers = []
    }

    pokemonFilter = pokemonFilterNew
    const newPokemonMarkers = []
    $.each(pokemonMarkers, function (index, pokemon) {
      if (pokemon.is_start) {
        newPokemonMarkers.push(pokemon)
      } else {
        map.removeLayer(pokemon.marker)
      }
    })
    pokemonMarkers = newPokemonMarkers

    questFilter = questFilterNew
    const newPokestopMarkers = []
    $.each(pokestopMarkers, function (index, pokestop) {
      if (pokestop.is_start) {
        newPokestopMarkers.push(pokestop)
      } else {
        map.removeLayer(pokestop.marker)
      }
    })
    pokestopMarkers = newPokestopMarkers

    const newSpawnpointMarkers = []
    $.each(spawnpointMarkers, function (index, spawnpoint) {
      map.removeLayer(spawnpoint.marker)
    })
    spawnpointMarkers = newSpawnpointMarkers

    gymFilter = gymFilterNew
    pokestopFilter = pokestopFilterNew
    raidFilter = raidFilterNew
    spawnpointFilter = spawnpointFilterNew
    // const raidFilterOld = $.extend(true, {}, raidFilter);
    const newGymMarkers = []
    $.each(gymMarkers, function (index, gym) {
      if (gym.is_start) {
        newGymMarkers.push(gym)
      } else {
        map.removeLayer(gym.marker)
      }
    })
    gymMarkers = newGymMarkers

    const newShowRaidTimers = raidFilter.timers.show
    if (newShowRaidTimers !== showRaidTimers) {
      showRaidTimers = newShowRaidTimers
    }

    showGyms = newShowGyms
    store('show_gyms', newShowGyms)
    showRaids = newShowRaids
    store('show_raids', newShowRaids)
    showPokestops = newShowPokestops
    store('show_pokestops', newShowPokestops)
    showQuests = newShowQuests
    store('show_quests', newShowQuests)
    showPokemon = newShowPokemon
    store('show_pokemon', newShowPokemon)
    showSpawnpoints = newShowSpawnpoints
    store('show_spawnpoints', newShowSpawnpoints)
    store('pokemon_filter', JSON.stringify(pokemonFilter))
    store('quest_filter', JSON.stringify(questFilter))
    store('raid_filter', JSON.stringify(raidFilter))
    store('gym_filter', JSON.stringify(gymFilter))
    store('pokestop_filter', JSON.stringify(pokestopFilter))
    store('spawnpoint_filter', JSON.stringify(spawnpointFilter))
    store('show_cells', newShowCells)
    showCells = newShowCells
    store('show_submission_cells', newShowSubmissionCells)
    showSubmissionCells = newShowSubmissionCells
    store('show_weathers', newShowWeathers)
    showWeathers = newShowWeathers
    showDevices = newShowDevices
    store('show_devices', newShowDevices)

    lastUpdateServer = 0
    loadData()

    $('#settingsModal').modal('hide')
  })

  const CustomControlSettings = L.Control.extend({
    options: {
      position: 'topleft'
    },
    onAdd: function () {
      const container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom')

      container.innerHTML = '<a href="#"><img src="/static/svg/settings.svg" style="width: 21px; height: 21px; class="center-block;"/></a>'

      container.onclick = function () {
        if (retrieve('show_gyms') === 'true') {
          $('#show-gyms').addClass('active')
          $('#hide-gyms').removeClass('active')
        } else {
          $('#hide-gyms').addClass('active')
          $('#show-gyms').removeClass('active')
        }

        if (retrieve('show_raids') === 'true') {
          $('#show-raids').addClass('active')
          $('#hide-raids').removeClass('active')
        } else {
          $('#hide-raids').addClass('active')
          $('#show-raids').removeClass('active')
        }

        if (retrieve('show_pokestops') === 'true') {
          $('#show-pokestops').addClass('active')
          $('#hide-pokestops').removeClass('active')
        } else {
          $('#hide-pokestops').addClass('active')
          $('#show-pokestops').removeClass('active')
        }

        if (retrieve('show_quests') === 'true') {
          $('#show-quests').addClass('active')
          $('#hide-quests').removeClass('active')
        } else {
          $('#hide-quests').addClass('active')
          $('#show-quests').removeClass('active')
        }

        if (retrieve('show_pokemon') === 'true') {
          $('#show-pokemon').addClass('active')
          $('#hide-pokemon').removeClass('active')
        } else {
          $('#hide-pokemon').addClass('active')
          $('#show-pokemon').removeClass('active')
        }

        if (retrieve('show_spawnpoints') === 'true') {
          $('#show-spawnpoints').addClass('active')
          $('#hide-spawnpoints').removeClass('active')
        } else {
          $('#hide-spawnpoints').addClass('active')
          $('#show-spawnpoints').removeClass('active')
        }

        if (retrieve('show_cells') === 'true') {
          $('#show-cells').addClass('active')
          $('#hide-cells').removeClass('active')
        } else {
          $('#hide-cells').addClass('active')
          $('#show-cells').removeClass('active')
        }

        if (retrieve('show_submission_cells') === 'true') {
          $('#show-submission-cells').addClass('active')
          $('#hide-submission-cells').removeClass('active')
        } else {
          $('#hide-submission-cells').addClass('active')
          $('#show-submission-cells').removeClass('active')
        }

        if (retrieve('show_weathers') === 'true') {
          $('#show-weathers').addClass('active')
          $('#hide-weathers').removeClass('active')
        } else {
          $('#hide-weathers').addClass('active')
          $('#show-weathers').removeClass('active')
        }

        if (retrieve('show_devices') === 'true') {
          $('#show-devices').addClass('active')
          $('#hide-devices').removeClass('active')
        } else {
          $('#hide-devices').addClass('active')
          $('#show-devices').removeClass('active')
        }

        $('#settingsModal').modal('show')
      }

      return container
    }
  })
  map.addControl(new CustomControlSettings())

  map.on('zoomend', function () {
    if (showCells && map.getZoom() < 13) {
      $.each(cellMarkers, function (index, cell) {
        map.removeLayer(cell.marker)
      })
      cellMarkers = []
    }

    if (showSubmissionCells && map.getZoom() < 16) {
      $.each(submissionPlacementCellMarkers, function (index, cell) {
        map.removeLayer(cell.marker)
      })
      submissionPlacementCellMarkers = []
      $.each(submissionPlacementRingMarkers, function (index, ring) {
        map.removeLayer(ring.marker)
      })
      submissionPlacementRingMarkers = []
    }

    if (showSubmissionCells && map.getZoom() < 14) {
      $.each(submissionTypeCellMarkers, function (index, cell) {
        map.removeLayer(cell.marker)
      })
      submissionTypeCellMarkers = []
    }

    lastUpdateServer = 0
    loadData()
  })

  map.on('dragend', function () {
    lastUpdateServer = 0
    loadData()
  })

  loadData()
  setInterval(loadData, 5000)
  setInterval(updateOpenedPopupLoop, 1000)
  setInterval(updateCellsLoop, 10000)
  setInterval(updateDevicesLoop, 10000)
  setInterval(updateMapTimers, 1000)
}

// MARK: - Date Loading

function loadData () {
  if (isLoading || new Date() - lastUpdate < 100) {
    return
  }
  isLoading = true
  lastUpdate = new Date()

  const bounds = map.getBounds()

  const pokemonFilterExclude = []
  const pokemonFilterIV = {}
  if (showPokemon) {
    let i
    for (i = 1; i <= '{{max_pokemon_id}}'; i++) {
      if (pokemonFilter[i].show === false) {
        pokemonFilterExclude.push(i)
      }
      if (pokemonFilter[i].show === 'filter') {
        pokemonFilterIV[i] = pokemonFilter[i].filter.replace(/\s/g, '')
      }
    }

    if (pokemonFilter.iv_and.on === true) {
      pokemonFilterIV.and = pokemonFilter.iv_and.filter.replace(/\s/g, '')
    }

    if (pokemonFilter.iv_or.on === true) {
      pokemonFilterIV.or = pokemonFilter.iv_or.filter.replace(/\s/g, '')
    }
  }

  const questFilterExclude = []
  if (showQuests) {
    let i
    for (i = 1; i <= '{{max_pokemon_id}}'; i++) {
      if (questFilter['p' + i].show === false) {
        questFilterExclude.push('p' + i)
      }
    }
    $.each(avilableItems, function (index, itemId) {
      if (questFilter['i' + itemId].show === false) {
        questFilterExclude.push('i' + itemId)
      }
    })
  }

  const raidFilterExclude = []
  if (showRaids) {
    // REVIEW: Probably not needed
    if (raidFilter.timers.show === false) {
      raidFilterExclude.push('timers')
    }
    let i
    for (i = 1; i <= 5; i++) {
      if (raidFilter['l' + i].show === false) {
        raidFilterExclude.push('l' + i)
      }
    }
    for (i = 1; i <= '{{max_pokemon_id}}'; i++) {
      if (raidFilter['p' + i].show === false) {
        raidFilterExclude.push('p' + i)
      }
    }
  }

  const gymFilterExclude = []
  if (showGyms || showRaids) {
    let i
    for (i = 0; i <= 3; i++) {
      if (gymFilter['t' + i].show === false) {
        gymFilterExclude.push('t' + i)
      }
    }
    if (gymFilter.ex.show !== false) {
      gymFilterExclude.push('ex')
    }
    for (i = 0; i <= 6; i++) {
      if (gymFilter['s' + i].show === false) {
        gymFilterExclude.push('s' + i)
      }
    }
  }

  const pokestopFilterExclude = []
  if (showPokestops) {
    if (pokestopFilter.normal.show === false) {
      pokestopFilterExclude.push('normal')
    }
    let i
    for (i = 1; i < 5; i++) {
      if (pokestopFilter['l' + i].show === false) {
        pokestopFilterExclude.push('l' + i)
      }
    }
    if (pokestopFilter.invasion.show === false) {
      pokestopFilterExclude.push('invasion')
    }
  }

  const spawnpointFilterExclude = []
  if (showSpawnpoints) {
    if (spawnpointFilter['no-timer'].show === false) {
      spawnpointFilterExclude.push('no-timer')
    }
    if (spawnpointFilter['with-timer'].show === false) {
      spawnpointFilterExclude.push('with-timer')
    }
  }

  const data = {
    _: Math.round((new Date()).getTime() / 1000),
    min_lat: bounds._southWest.lat,
    max_lat: bounds._northEast.lat,
    min_lon: bounds._southWest.lng,
    max_lon: bounds._northEast.lng,
    show_gyms: showGyms,
    show_raids: showRaids,
    show_pokestops: showPokestops,
    show_quests: showQuests,
    show_pokemon: showPokemon,
    pokemon_filter_exclude: JSON.stringify(pokemonFilterExclude),
    quest_filter_exclude: JSON.stringify(questFilterExclude),
    pokemon_filter_iv: JSON.stringify(pokemonFilterIV),
    raid_filter_exclude: JSON.stringify(raidFilterExclude),
    gym_filter_exclude: JSON.stringify(gymFilterExclude),
    pokestop_filter_exclude: JSON.stringify(pokestopFilterExclude),
    spawnpoint_filter_exclude: JSON.stringify(spawnpointFilterExclude),
    show_spawnpoints: showSpawnpoints,
    show_cells: showCells && map.getZoom() >= 13,
    show_submission_placement_cells: showSubmissionCells && map.getZoom() >= 16,
    show_submission_type_cells: showSubmissionCells && map.getZoom() >= 14,
    show_weathers: showWeathers,
    show_active_devices: showDevices,
    last_update: lastUpdateServer,
    _csrf: '{{csrf}}'
  }

  $.ajax({
    url: '/api/get_data',
    data: data,
    type: 'post',
    success: function (data) {
      const gyms = data.data.gyms
      let ts = Math.round((new Date()).getTime() / 1000)
      $.each(gyms, function (index, gym) {
        if (showGyms || (showRaids && gym.raid_end_timestamp >= ts)) {
          addGym(gym, ts)
        }
      })

      const pokestops = data.data.pokestops
      ts = Math.round((new Date()).getTime() / 1000)
      $.each(pokestops, function (index, pokestop) {
        if (showPokestops || (showQuests && pokestop.quest_type !== null)) {
          addPokestop(pokestop, ts)
        }
      })

      const pokemon = data.data.pokemon
      ts = Math.round((new Date()).getTime() / 1000)
      $.each(pokemon, function (index, pokemon) {
        if (showPokemon && pokemon.expire_timestamp >= ts /* && matchesPokemonFilter(pokemon.pokemon_id) */ && !hiddenPokemonIds.includes(pokemon.id)) {
          addPokemon(pokemon,ts)
        }
      })

      const spawnpoints = data.data.spawnpoints
      $.each(spawnpoints, function (index, spawnpoint) {
        if (showSpawnpoints) {
          if (spawnpoint.updated > lastUpdateServer) {
            lastUpdateServer = spawnpoint.updated
          }
          const oldSpawnpoint = spawnpointMarkers.find(function (value) {
            return spawnpoint.lat === value.lat && spawnpoint.lon === value.lon
          })

          if (oldSpawnpoint === undefined) {
            spawnpoint.marker = getSpawnpointMarker(spawnpoint, ts)
            spawnpointMarkers.push(spawnpoint)
            spawnpoint.marker.addTo(map)
          }
        }
      })

      const devices = data.data.active_devices
      $.each(devices, function (index, device) {
        if (showDevices) {
          if (device.last_seen > lastUpdateServer) {
            lastUpdateServer = device.last_seen
          }
          const oldDevice = deviceMarkers.find(function (value) {
            return device.uuid === value.uuid
          })

          if (oldDevice === undefined) {
            device.marker = getDeviceMarker(device, ts)
            deviceMarkers.push(device)
            device.marker.addTo(map)
          } else {
            var isOffline = isDeviceOffline(device, ts)
            oldDevice.marker.setIcon(isOffline ? deviceOfflineIcon : deviceOnlineIcon)
            oldDevice.last_lat = device.last_lat
            oldDevice.last_lon = device.last_lon
            oldDevice.last_seen = device.last_seen
          }
        }
      })

      const cells = data.data.cells
      $.each(cells, function (index, cell) {
        if (showCells && map.getZoom() >= 13) {
          if (cell.updated > lastUpdateServer) {
            lastUpdateServer = cell.updated
          }
          const oldCell = cellMarkers.find(function (value) {
            return cell.id === value.id
          })

          if (oldCell === undefined) {
            cell.marker = getCellMarker(cell, ts)
            cellMarkers.push(cell)
            cell.marker.addTo(map)
          } else {
            oldCell.updated = cell.updated
            oldCell.marker.setStyle(getCellStyle(cell, ts))
          }
        }
      })

      const submissionTypeCells = data.data.submission_type_cells
      $.each(submissionTypeCells, function (index, cell) {
        if (showSubmissionCells && map.getZoom() >= 14) {
          if (lastUpdateServer === 0) {
            lastUpdateServer = 1
          }

          const oldCell = submissionTypeCellMarkers.find(function (value) {
            return cell.id === value.id
          })

          if (oldCell === undefined) {
            cell.marker = getSubmissionTypeCellMarker(cell, ts)
            submissionTypeCellMarkers.push(cell)
            cell.marker.addTo(map)
          } else {
            oldCell.updated = cell.updated
            oldCell.marker.setStyle(getSubmissionTypeCellStyle(cell, ts))
          }
        }
      })

      const submissionPlacementCells = data.data.submission_placement_cells
      $.each(submissionPlacementCells, function (index, cell) {
        if (showSubmissionCells && map.getZoom() >= 16) {
          if (lastUpdateServer === 0) {
            lastUpdateServer = 1
          }

          const oldCell = submissionPlacementCellMarkers.find(function (value) {
            return cell.id === value.id
          })

          if (oldCell === undefined) {
            cell.marker = getSubmissionPlacementCellMarker(cell, ts)
            submissionPlacementCellMarkers.push(cell)
            cell.marker.addTo(map)
          } else {
            oldCell.updated = cell.updated
            oldCell.marker.setStyle(getSubmissionPlacementCellStyle(cell, ts))
          }
        }
      })

      const submissionPlacementRings = data.data.submission_placement_rings
      $.each(submissionPlacementRings, function (index, ring) {
        if (showSubmissionCells && map.getZoom() >= 16) {
          if (lastUpdateServer === 0) {
            lastUpdateServer = 1
          }
          const oldRing = submissionPlacementRingMarkers.find(function (value) {
            return ring.id === value.id
          })

          if (oldRing === undefined) {
            ring.marker = getSubmissionPlacementRingMarker(ring, ts)
            submissionPlacementRingMarkers.push(ring)
            ring.marker.addTo(map)
          } else {
            oldRing.updated = ring.updated
            oldRing.marker.setStyle(getSubmissionPlacementRingStyle(ring, ts))
          }
        }
      })

      const weathers = data.data.weather
      $.each(weathers, function (index, weather) {
        if (showWeathers) {
          if (weather.updated > lastUpdateServer) {
            lastUpdateServer = weather.updated
          }
          const oldWeather = weatherMarkers.find(function (value) {
            return weather.id === value.id
          })

          if (oldWeather === undefined) {
            weather.marker = getWeatherMarker(weather, ts)
            let weatherIcon
            if (weather.gameplay_condition !== 0 && weather.gameplay_condition !== null) {
              weatherIcon = '<img src="/static/img/weather/' + weather.gameplay_condition + '.png" height="25" width="25">'
            } else {
              weatherIcon = ''
            }
            const weatherName = weatherTypes[weather.gameplay_condition].name
            var options = { permanent: true, className: 'leaflet-tooltip', direction: 'center', offset: [0, 15] }
            /* var tooltip = */ weather.marker.bindTooltip('<center>' + weatherIcon + '</center><center><b>' + weatherName + '</b></center>', options)
            weatherMarkers.push(weather)
            weather.marker.addTo(map)
          } else {
            oldWeather.updated = weather.updated
            oldWeather.marker.setStyle(getWeatherStyle(weather, ts))
          }
        }
      })
    },
    error: function(xhr) {
      console.error('/api/get_data returned status code ' + xhr.status + ' (' + xhr.statusText + ')')
    },
    complete: function() {
      lastUpdate = new Date()
      isLoading = false
    }
  })
}

// MARK: - Filters

function getPokemonSize (pokemonId) {
  const size = pokemonFilter[pokemonId].size
  if (size === 'small') {
    return 30
  } else if (size === 'large') {
    return 55
  } else if (size === 'huge') {
    return 75
  } else {
    return 40
  }
}

function getPokemonIndex (pokemon) {
  const size = pokemonFilter[pokemon.pokemon_id].size
  if (pokemon.atk_iv === 15 && pokemon.def_iv === 15 && pokemon.sta_iv === 15) {
    return 9
  }
  if (pokemon.pvp_rankings_great_league !== null && pokemon.pvp_rankings_ultra_league !== null) {
    let bestRank = 4
    $.each(pokemon.pvp_rankings_great_league, function (index, ranking) {
      if (ranking.rank !== null && ranking.rank < bestRank) {
        bestRank = ranking.rank
      }
    })
    $.each(pokemon.pvp_rankings_ultra_league, function (index, ranking) {
      if (ranking.rank !== null && ranking.rank < bestRank) {
        bestRank = ranking.rank
      }
    })
    if (bestRank === 1) {
      return 7
    } else if (bestRank === 2) {
      return 6
    } else if (bestRank === 3) {
      return 5
    }
  }
  if (size === 'small') {
    return 1
  } else if (size === 'large') {
    return 3
  } else if (size === 'huge') {
    return 4
  } else {
    return 2
  }
}

function getQuestSize (questId) {
  if (questFilter[questId] === undefined || questFilter[questId].size === undefined) {
    return 30
  }
  const size = questFilter[questId].size
  if (size === 'small') {
    return 20
  } else if (size === 'large') {
    return 45
  } else if (size === 'huge') {
    return 65
  } else {
    return 30
  }
}

function getQuestIndex (questId) {
  if (questFilter[questId] === undefined || questFilter[questId].size === undefined) {
    return 0
  }
  const size = questFilter[questId].size
  if (size === 'small') {
    return 1
  } else if (size === 'large') {
    return 3
  } else if (size === 'huge') {
    return 4
  } else {
    return 2
  }
}

function getGymSize (teamId) {
  const size = gymFilter['t' + teamId].size
  if (size === 'small') {
    return 30
  } else if (size === 'large') {
    return 55
  } else if (size === 'huge') {
    return 75
  } else {
    return 40
  }
}

function getRaidSize (id) {
  const size = raidFilter[id].size
  if (size === 'small') {
    return 30
  } else if (size === 'large') {
    return 55
  } else if (size === 'huge') {
    return 75
  } else {
    return 40
  }
}

function getPokestopSize (id) {
  const size = pokestopFilter[id].size
  if (size === 'small') {
    return 20
  } else if (size === 'large') {
    return 45
  } else if (size === 'huge') {
    return 65
  } else {
    return 30
  }
}

// TODO: Calculate spawnpoint size?

// MARK: - Local Storage

function store (name, value) {
  localStorage.setItem(name, value)
}

function retrieve (name) {
  return localStorage.getItem(name)
}

// MARK: - Timers

function startDespawnTimer (pokemon, ts) {
  setTimeout(
    function () {
      const ts2 = Math.round((new Date()).getTime() / 1000)
      const realPokemon = pokemonMarkers.find(function (value) {
        return pokemon.id === value.id
      })
      if (realPokemon === undefined) {
        return
      }
      if (ts2 + 1 >= realPokemon.expire_timestamp) {
        pokemonMarkers = pokemonMarkers.filter(function (obj) {
          return obj.id !== realPokemon.id
        })
      } else {
        return startDespawnTimer(realPokemon, ts2)
      }

      map.removeLayer(realPokemon.marker)
    }, (pokemon.expire_timestamp - ts) * 1000)
}

function startRaidTimer (gym, ts) {
  setTimeout(
    function () {
      const ts2 = Math.round((new Date()).getTime() / 1000)
      const realGym = gymMarkers.find(function (value) {
        return gym.id === value.id
      })
      if (realGym === undefined) {
        return
      }
      realGym.raidTimerSet = false

      if (!showGyms && !gym.is_start) {
        gymMarkers = gymMarkers.filter(function (obj) {
          return obj.id !== realGym.id
        })
        map.removeLayer(realGym.marker)
      } else {
        realGym.marker.setIcon(getGymMarkerIcon(realGym, ts2 + 1))
      }
    }, (gym.raid_end_timestamp - ts) * 1000)

  setTimeout(
    function () {
      const ts2 = Math.round((new Date()).getTime() / 1000)
      const realGym = gymMarkers.find(function (value) {
        return gym.id === value.id
      })
      if (realGym === undefined) {
        return
      }
      realGym.marker.setIcon(getGymMarkerIcon(realGym, ts2 + 1))
    }, (gym.raid_battle_timestamp - ts) * 1000)
}

function startPokestopTimer (pokestop, expireTimestamp, ts) {
  setTimeout(
    function () {
      const ts2 = Math.round((new Date()).getTime() / 1000)
      const realPokestop = pokestopMarkers.find(function (value) {
        return pokestop.id === value.id
      })
      if (realPokestop === undefined) {
        return
      }
      if (expireTimestamp - 10 >= ts2) {
        startPokestopTimer(realPokestop, expireTimestamp, ts2)
      } else {
        if (realPokestop.is_start) {
            realPokestop.marker.setIcon(getPokestopMarkerIcon(realPokestop, ts2 + 1))
        } else {
          pokestopMarkers = pokestopMarkers.filter(function (obj) {
            return obj.id !== realPokestop.id
          })
          map.removeLayer(realPokestop.marker)
        }
      }
    }, (expireTimestamp - ts) * 1000)
}

// MARK: - Add

function addPokemon(pokemon, ts) {
  if (pokemon.updated > lastUpdateServer) {
    lastUpdateServer = pokemon.updated
  }
  const oldPokemon = pokemonMarkers.find(function (value) {
    return pokemon.id === value.id
  })

  if (oldPokemon === undefined || pokemon.is_start) {
    if (pokemon.pokestop_id !== null && pokemon.spawn_id === null) {
      var latOffset = Math.random() * 0.0002 - 0.0001
      if (latOffset >= 0) {
        latOffset += 0.00005
      } else {
        latOffset -= 0.00005
      }
      var lonOffset = Math.random() * 0.0002 - 0.0001
      if (lonOffset >= 0) {
        lonOffset += 0.00005
      } else {
        lonOffset -= 0.00005
      }
      pokemon.lat += latOffset
      pokemon.lon += +lonOffset
    }

    pokemon.marker = getPokemonMarker(pokemon, ts)
    pokemonMarkers.push(pokemon)
    pokemon.marker.addTo(map)
    if (!pokemon.is_start) {
      startDespawnTimer(pokemon, ts)
    } else {
      pokemon.marker.openPopup()
    }
  } else {
    if (oldPokemon.expire_timestamp !== pokemon.expire_timestamp) {
      oldPokemon.expire_timestamp = pokemon.expire_timestamp
    }
    if (oldPokemon.atk_iv !== pokemon.atk_iv) {
      oldPokemon.atk_iv = pokemon.atk_iv
      oldPokemon.def_iv = pokemon.def_iv
      oldPokemon.sta_iv = pokemon.sta_iv
      oldPokemon.cp = pokemon.cp
      oldPokemon.weight = pokemon.weight
      oldPokemon.size = pokemon.size
      oldPokemon.move_1 = pokemon.move_1
      oldPokemon.move_2 = pokemon.move_2
      oldPokemon.level = pokemon.level
    }
    if (oldPokemon.updated !== pokemon.updated) {
      oldPokemon.updated = pokemon.updated
    }

    if (hiddenPokemonIds.includes(oldPokemon.id)) {
      map.removeLayer(oldPokemon.marker)
    }
  }
}

function addPokestop(pokestop, ts) {
  if (pokestop.updated > lastUpdateServer) {
    lastUpdateServer = pokestop.updated
  }
  const oldPokestop = pokestopMarkers.find(function (value) {
    return pokestop.id === value.id
  })

  if (pokestop.lure_expire_timestamp === null) {
    pokestop.lure_expire_timestamp = 0
  }

  if (pokestop.incident_expire_timestamp === null) {
    pokestop.incident_expire_timestamp = 0
  }

  if (oldPokestop === undefined || pokestop.is_start) {
    pokestop.marker = getPokestopMarker(pokestop, ts)
    pokestopMarkers.push(pokestop)
    pokestop.marker.addTo(map)
    if (pokestop.lure_expire_timestamp >= ts) {
      pokestop.willUpdate = true
      startPokestopTimer(pokestop, pokestop.lure_expire_timestamp, ts)
    } else {
      pokestop.willUpdate = false
    }
    if (pokestop.incident_expire_timestamp >= ts) {
      pokestop.willUpdateIncident = true
      startPokestopTimer(pokestop, pokestop.incident_expire_timestamp, ts)
    } else {
      pokestop.willUpdateIncident = false
    }
    if (pokestop.is_start) {
      pokestop.marker.openPopup()
    }
  } else {
    if (oldPokestop.lure_expire_timestamp !== pokestop.lure_expire_timestamp) {
      oldPokestop.lure_expire_timestamp = pokestop.lure_expire_timestamp
      oldPokestop.lure_id = pokestop.lure_id
      oldPokestop.marker.setIcon(getPokestopMarkerIcon(pokestop, ts))
    }
    if (oldPokestop.incident_expire_timestamp !== pokestop.incident_expire_timestamp) {
      oldPokestop.incident_expire_timestamp = pokestop.incident_expire_timestamp
      oldPokestop.pokestop_display = pokestop.pokestop_display
      oldPokestop.grunt_type = pokestop.grunt_type
      oldPokestop.marker.setIcon(getPokestopMarkerIcon(pokestop, ts))
    }

    oldPokestop.updated = pokestop.updated
    oldPokestop.last_modified_timestamp = pokestop.last_modified_timestamp

    if (oldPokestop.quest_type !== pokestop.quest_type) {
      oldPokestop.quest_type = pokestop.quest_type
      oldPokestop.quest_target = pokestop.quest_target
      oldPokestop.quest_template = pokestop.quest_template
      oldPokestop.quest_conditions = pokestop.quest_conditions
      oldPokestop.quest_rewards = pokestop.quest_rewards
      oldPokestop.quest_timestamp = pokestop.quest_timestamp
      oldPokestop.marker.setIcon(getPokestopMarkerIcon(pokestop, ts))
    }
    if (oldPokestop.willUpdate === false && oldPokestop.lure_expire_timestamp >= ts) {
      oldPokestop.willUpdate = true
      startPokestopTimer(oldPokestop, oldPokestop.lure_expire_timestamp, ts)
    }
    if (oldPokestop.willUpdateIncident === false && oldPokestop.incident_expire_timestamp >= ts) {
      oldPokestop.willUpdateIncident = true
      startPokestopTimer(oldPokestop, oldPokestop.incident_expire_timestamp, ts)
    }
  }
}

function addGym(gym, ts) {
  if (gym.updated > lastUpdateServer) {
    lastUpdateServer = gym.updated
  }
  const oldGym = gymMarkers.find(function (value) {
    return gym.id === value.id
  })

  if (gym.team_id === null) {
    gym.team_id = 0
  }

  if (oldGym === undefined || gym.is_start) {
    const marker = getGymMarker(gym, ts)
    gym.marker = marker
    gymMarkers.push(gym)
    gym.marker.addTo(map)
    if (gym.raid_end_timestamp >= ts) {
      startRaidTimer(gym, ts)
      gym.raidTimerSet = true
      if (showRaidTimers) {
        setDespawnTimer(gym)
      }
    } else {
      gym.raidTimerSet = false
    }
    if (gym.is_start) {
      gym.marker.openPopup()
    }
  } else {
    oldGym.updated = gym.updated
    oldGym.last_modified_timestamp = gym.last_modified_timestamp

    if (oldGym.availble_slots !== gym.availble_slots ||
        oldGym.team_id !== gym.team_id ||
        oldGym.raid_end_timestamp !== gym.raid_end_timestamp ||
        oldGym.raid_pokemon_id !== gym.raid_pokemon_id) {
      oldGym.availble_slots = gym.availble_slots
      oldGym.team_id = gym.team_id
      oldGym.raid_end_timestamp = gym.raid_end_timestamp
      oldGym.raid_battle_timestamp = gym.raid_battle_timestamp
      oldGym.raid_spawn_timestamp = gym.raid_spawn_timestamp
      oldGym.raid_pokemon_id = gym.raid_pokemon_id
      oldGym.raid_pokemon_form = gym.raid_pokemon_form
      oldGym.raid_pokemon_gender = gym.raid_pokemon_gender
      oldGym.raid_pokemon_costume = gym.raid_pokemon_costume
      oldGym.raid_pokemon_cp = gym.raid_pokemon_cp
      oldGym.raid_pokemon_move_1 = gym.raid_pokemon_move_1
      oldGym.raid_pokemon_move_2 = gym.raid_pokemon_move_2
      oldGym.raid_level = gym.raid_level
      oldGym.raid_is_exclusive = gym.raid_is_exclusive
      oldGym.marker.setIcon(getGymMarkerIcon(oldGym, ts))
      if (oldGym.raid_end_timestamp >= ts && !oldGym.raidTimerSet) {
        startRaidTimer(oldGym, ts)
        oldGym.raidTimerSet = true
        if (showRaidTimers) {
          setDespawnTimer(oldGym)
        }
      }
    }
  }
}

// MARK: - Popups

function updateOpenedPopupLoop () {
  if (openedPokemon !== undefined) {
    openedPokemon.marker._popup.setContent(getPokemonPopupContent(openedPokemon))
  }
  if (openedPokestop !== undefined) {
    openedPokestop.marker._popup.setContent(getPokestopPopupContent(openedPokestop))
  }
  if (openedGym !== undefined) {
    openedGym.marker._popup.setContent(getGymPopupContent(openedGym))
  }
  if (openedCell !== undefined) {
    openedCell.marker._popup.setContent(getCellPopupContent(openedCell))
  }
  if (openedSubmissionTypeCell !== undefined) {
    openedSubmissionTypeCell.marker._popup.setContent(getSubmissionTypeCellPopupContent(openedSubmissionTypeCell))
  }
  if (openedWeather !== undefined) {
    openedWeather.marker._popup.setContent(getWeatherPopupContent(openedWeather))
  }
  if (openedDevice !== undefined) {
    openedDevice.marker._popup.setContent(getDevicePopupContent(openedDevice))
  }
}

function updateCellsLoop () {
  const ts = Math.round((new Date()).getTime() / 1000)
  $.each(cellMarkers, function (index, cell) {
    cell.marker.setStyle(getCellStyle(cell, ts))
  })
  $.each(weatherMarkers, function (index, weather) {
    weather.marker.setStyle(getWeatherStyle(weather, ts))
  })
}

function updateDevicesLoop () {
  $.each(deviceMarkers, function (index, device) {
    var newLatLng = new L.LatLng(device.last_lat, device.last_lon)
    device.marker.setLatLng(newLatLng)
  })
}

function updateMapTimers () {
  $.each(gymMarkers, function (index, marker) {
    if (showRaidTimers) {
      setDespawnTimer(marker)
    } else {
      marker.marker.unbindTooltip()
    }
  })
}

function getPokemonPopupContent (pokemon) {
  const despawnDate = new Date(pokemon.expire_timestamp * 1000)
  const hasIV = pokemon.atk_iv !== null
  let content = ''

  let pokemonName
  if (pokemon.form !== 0 && pokemon.form !== null) {
    pokemonName = getFormName(pokemon.form) + ' ' + getPokemonName(pokemon.pokemon_id)
  } else {
    pokemonName = getPokemonName(pokemon.pokemon_id)
  }
  if (pokemon.display_pokemon_id > 0) {
    pokemonName += ' (' + getPokemonNameNoId(pokemon.display_pokemon_id) + ')'
  }

  const pokemonIcon = getPokemonIconString(pokemon.pokemon_id, pokemon.form, pokemon.pvp_rankings_great_league, pokemon.pvp_rankings_ultra_league)

  content +=
    '<div class="row">' + // START 1ST ROW
        '<div class="col-12 col-md-8 center-vertical text-nowrap">' +
            '<h6><b>' + pokemonName + ' ' + getGenderIcon(pokemon.gender) + '</b></h6>' +
        '</div>' +
        '<div class="col-6 col-md-4 center-vertical">' +
            '<div style="float:right; margin-right:5px;">'
  if (!(pokemon.display_pokemon_id > 0) && pokemon.weather !== 0 && pokemon.weather !== null) {
    content += '<img src="/static/img/weather/' + pokemon.weather + '.png" height="32" width="32">'
  }
  content +=
            '</div>' +
        '</div>' +
    '</div>' + // END 1ST ROW

    '<div class="row">' + // START 2ND ROW
        '<div class="' + (hasIV ? 'col-6 col-md-4' : 'col text-center') + '">' +
            '<div class="row' + (hasIV ? '' : 'text-center') + '" style="margin: auto;">' +
                '<img src="/static/img/' + pokemonIcon + '" height="64" width="64">' +
            '</div>' + // END POKEMON ROW
            '<div class="row text-nowrap" style="margin-left:auto; margin-right:auto;">'
  var pkmn = pokemonDb[pokemon.pokemon_id]
  if (pkmn !== undefined && pkmn !== null) {
    var types = pkmn.types
    if (types !== null && types.length > 0) {
      content += '<div class="col">'
      if (types.length === 2) {
        content += '<img src="/static/img/type/' + types[0].type.toLowerCase() + '.png" height="16" width="16">&nbsp;'
        content += '<img src="/static/img/type/' + types[1].type.toLowerCase() + '.png" height="16" width="16">'
      } else {
        content += '<img src="/static/img/type/' + types[0].type.toLowerCase() + '.png" height="16" width="16">'
      }
      content += '</div>'
    }
  }
  content +=
            '</div>' + // END TYPE ROW
        '</div>' + // END COLUMN
        '<div class="col-12 col-md-8 text-nowrap">'
  if (hasIV) {
    const ivPercent = Math.round((pokemon.atk_iv + pokemon.def_iv + pokemon.sta_iv) / 45 * 1000) / 10
    content += '<b>IV:</b> ' + ivPercent + '% (A' + pokemon.atk_iv + '|D' + pokemon.def_iv + '|S' + pokemon.sta_iv + ')<br>'
  }
  if (pokemon.cp !== null) {
    content += '<b>CP:</b> ' + pokemon.cp + ' (Lvl. ' + pokemon.level + ')<br>'
  }
  if (pokemon.move_1 !== null) {
    content += '<b>Fast:</b> ' + getMoveName(pokemon.move_1) + '<br>'
  }
  if (pokemon.move_2 !== null) {
    content += '<b>Charge:</b> ' + getMoveName(pokemon.move_2) + '<br>'
  }
  if (pokemon.height !== null && pokemon.weight !== null) {
    content += '<b>Size:</b> ' + getSize(pokemon.size) + ' | <b>Weight:</b> ' + Math.round(pokemon.weight) + 'kg<br>'
  }
  if (pokemon.capture_1 !== null && pokemon.capture_2 !== null && pokemon.capture_3 !== null) {
    content += '<b>Catch Chances:</b><br>'
    content += '<img src="/static/img/item/1.png" height="14" width="14"> ' + (pokemon.capture_1 * 100).toFixed(1) + '% '
    content += '<img src="/static/img/item/2.png" height="14" width="14"> ' + (pokemon.capture_2 * 100).toFixed(1) + '%<br>'
    content += '<img src="/static/img/item/3.png" height="14" width="14"> ' + (pokemon.capture_3 * 100).toFixed(1) + '%<br>'
  }
  content +=
        '</div>' +
    '</div>' + // END 2ND ROW
    '<br>' +
    '<div class="row">' + // START 3RD ROW
        '<div class="col text-nowrap">'
  if (pokemon.expire_timestamp_verified) {
    content += '<b>Despawn Time:</b> '
  } else {
    content += '<b>Despawn Time:</b> ~'
  }
  content += despawnDate.toLocaleTimeString() + ' (' + getTimeUntill(despawnDate) + ')<br>' +
        '</div>' +
        '<div class="col-sm text-nowrap">'
  if (pokemon.first_seen_timestamp !== 0 && pokemon.first_seen_timestamp !== undefined) {
    const firstSeenDate = new Date(pokemon.first_seen_timestamp * 1000)
    content += '<small><b>First Seen:</b> ' + firstSeenDate.toLocaleTimeString() + ' (' + getTimeSince(firstSeenDate) + ')</small><br>'
  }
  content +=
        '</div>' +
        '<div class="col-sm text-nowrap">'
  if (pokemon.updated !== 0 && pokemon.updated !== null) {
    const updatedDate = new Date(pokemon.updated * 1000)
    content += '<small><b>Latest Seen:</b> ' + updatedDate.toLocaleTimeString() + ' (' + getTimeSince(updatedDate) + ')</small><br>'
  }
  if (pokemon.pvp_rankings_great_league !== undefined && pokemon.pvp_rankings_great_league !== null) {
    content +=
      '<a href="#" onclick="toggleGreatLeague()">' +
      '<b>Great League:</b>' +
      '</a><br>'
    if (showGreatLeague) {
      $.each(pokemon.pvp_rankings_great_league, function (index, ranking) {
        let pokemonName
        if (ranking.form !== 0) {
          pokemonName = getFormName(ranking.form) + ' ' + getPokemonName(ranking.pokemon)
        } else {
          pokemonName = getPokemonName(ranking.pokemon)
        }
        let infoString
        if (ranking.rank === null) {
          infoString = 'CP too high'
        } else {
          infoString = '#' + ranking.rank + ' (' + Math.round(ranking.percentage * 1000) / 10 + '%)'
        }
        if (ranking.cp !== null) {
          infoString += ' @' + ranking.cp + 'CP (Lvl. ' + (ranking.level) + ')'
        }
        content += '<small><b>' + pokemonName + ':</b> ' + infoString + '</small><br>'
      })
    }
  }

  if (pokemon.pvp_rankings_ultra_league !== undefined && pokemon.pvp_rankings_ultra_league !== null) {
    content +=
      '<a href="#" onclick="toggleUltraLeague()">' +
      '<b>Ultra League:</b>' +
      '</a><br>'
    if (showUltraLeague) {
      $.each(pokemon.pvp_rankings_ultra_league, function (index, ranking) {
        let pokemonName
        if (ranking.form !== 0) {
          pokemonName = getFormName(ranking.form) + ' ' + getPokemonName(ranking.pokemon)
        } else {
          pokemonName = getPokemonName(ranking.pokemon)
        }
        let infoString
        if (ranking.rank === null) {
          infoString = 'CP too high'
        } else {
          infoString = '#' + ranking.rank + ' (' + Math.round(ranking.percentage * 1000) / 10 + '%)'
        }
        if (ranking.cp !== null) {
          infoString += ' @' + ranking.cp + 'CP (Lvl. ' + (ranking.level) + ')'
        }
        content += '<small><b>' + pokemonName + ':</b> ' + infoString + '</small><br>'
      })
    }
  }

  content +=
    '</div>' +
    '</div>' + // END 3RD ROW
    '<br>' +
    '<div class="text-center">' +
        '<a id="h' + pokemon.id + '" title="Hide Pokemon" href="#" onclick="setIndividualPokemonHidden(\'' + pokemon.id + '\');return false;"><b>[Hide]</b></a>&nbsp;' +
        '<a title="Filter Pokemon" href="#" onclick="addPokemonFilter(' + pokemon.pokemon_id + ', false);return false;"><b>[Exclude]</b></a> ' +
        '<a title="Direct Link" href="/@pokemon/'+pokemon.id+'"><b>[Direct Link]</b></a>' +
        '<br>' +
        '<br>' +
        '<div class="row">' +
            '<div class="col">' +
                '<a href="https://www.google.com/maps/place/' + pokemon.lat + ',' + pokemon.lon + '" title="Open in Google Maps">' +
                    '<img src="/static/img/navigation/gmaps.png" height="32" width="32">' +
                '</a>' +
            '</div>' +
            '<div class="col">' +
                '<a href="https://maps.apple.com/maps?daddr=' + pokemon.lat + ',' + pokemon.lon + '" title="Open in Apple Maps">' +
                    '<img src="/static/img/navigation/applemaps.png" height="32" width="32">' +
                '</a>' +
            '</div>' +
            '<div class="col">' +
                '<a href="https://www.waze.com/ul?ll=' + pokemon.lat + ',' + pokemon.lon + '&navigate=yes" title="Open in Waze">' +
                    '<img src="/static/img/navigation/othermaps.png" height="32" width="32">' +
                '</a>' +
            '</div>' +
        '</div>' +
    '</div>'
  return content
}

// eslint-disable-next-line no-unused-vars
function setIndividualPokemonHidden (id) {
  if (id > 0 && !hiddenPokemonIds.includes(id)) {
    hiddenPokemonIds.push(id)
    const pokemonMarker = pokemonMarkers.find(function (value) {
      return id === value.id
    })

    if (pokemonMarker === null) {
      console.log('Failed to find pokemon marker', id)
    } else {
      map.removeLayer(pokemonMarker.marker)
    }
  }
}

// eslint-disable-next-line no-unused-vars
function addPokemonFilter (pokemonId, show) {
  pokemonFilter[pokemonId].show = show
  store('pokemon_filter', JSON.stringify(pokemonFilter))

  $.each(pokemonMarkers, function (index, pokemon) {
    if (pokemon.pokemon_id === pokemonId) {
      map.removeLayer(pokemon.marker)
    }
  })
}

function getPokestopPopupContent (pokestop) {
  const now = new Date()
  const lureExpireDate = new Date(pokestop.lure_expire_timestamp * 1000)
  const invasionExpireDate = new Date(pokestop.incident_expire_timestamp * 1000)
  const isActiveLure = lureExpireDate >= now

  let content = '<div class="text-center">'
  if (pokestop.name === null || pokestop.name === '') {
    content += '<h6><b>Unknown Pokestop Name</b></h6>'
  } else {
    content += '<h6><b>' + pokestop.name + '</b></h6>'
  }

  if (pokestop.url !== null) {
    var lureClass = isActiveLure && pokestop.lure_id !== 0
      ? (pokestop.lure_id === 501
        ? 'lure-normal'
        : pokestop.lure_id === 502
          ? 'lure-glacial'
          : pokestop.lure_id === 503
            ? 'lure-mossy'
            : pokestop.lure_id === 504
              ? 'lure-magnetic'
              : 'lure-normal')
      : ''
    content += '<img src="' + pokestop.url.replace('http://', 'https://') + '" class="circle-image ' + lureClass + '"/><br><br>'
  }

  content += '</div>' +
    '<div class="container">'

  if (isActiveLure) {
    content += '<b>Lure Type:</b> ' + getLureName(pokestop.lure_id) + '<br>'
    content += '<b>Lure End Time:</b> ' + lureExpireDate.toLocaleTimeString() + ' (' + getTimeUntill(lureExpireDate) + ')<br><br>'
  }

  if (invasionExpireDate >= now) {
    var gruntType = getGruntName(pokestop.grunt_type)
    content += '<b>Team Rocket Invasion</b><br>'
    content += '<b>Grunt Type:</b> ' + gruntType + '<br>'
    content += '<b>End Time:</b> ' + invasionExpireDate.toLocaleTimeString() + ' (' + getTimeUntill(invasionExpireDate) + ')<br><br>'
  }

  if (pokestop.quest_type !== null) {
    const conditions = pokestop.quest_conditions
    let conditionsString = ''
    if (conditions !== undefined && conditions.length > 0) {
      conditionsString += ' ('
      $.each(conditions, function (index, condition) {
        let formating
        if (index === 0) {
          formating = ''
        } else {
          formating = ', '
        }

        conditionsString += formating + getQuestCondition(condition)
      })
      conditionsString += ')'
    }

    content += '<b>Quest Condition:</b> ' + getQuestName(pokestop.quest_type, pokestop.quest_target) + conditionsString + '<br>'

    $.each(pokestop.quest_rewards, function (index, reward) {
      content += '<b>Quest Reward:</b> ' + getQuestReward(reward) + '<br>'
    })

    content += '<br>'
  }

  const updatedDate = new Date(pokestop.updated * 1000)
  if (updatedDate) {
    content += '<small><b>Last Updated:</b> ' + updatedDate.toLocaleDateString() + ' ' + updatedDate.toLocaleTimeString() + ' (' + getTimeSince(updatedDate) + ')<br></small>'
  }

  content +=
        '<br>' +
        '<div class="text-center">' +
          '<a title="Direct Link" href="/@pokestop/'+pokestop.id+'"><b>[Direct Link]</b></a>' +
          '<br>' +
          '<br>' +
          '<div class="row text-center">' +
              '<div class="col">' +
                  '<a href="https://www.google.com/maps/place/' + pokestop.lat + ',' + pokestop.lon + '" title="Open in Google Maps">' +
                      '<img src="/static/img/navigation/gmaps.png" height="32" width="32">' +
                  '</a>' +
              '</div>' +
              '<div class="col">' +
                  '<a href="https://maps.apple.com/maps?daddr=' + pokestop.lat + ',' + pokestop.lon + '" title="Open in Apple Maps">' +
                      '<img src="/static/img/navigation/applemaps.png" height="32" width="32">' +
                  '</a>' +
              '</div>' +
              '<div class="col">' +
                  '<a href="https://www.waze.com/ul?ll=' + pokestop.lat + ',' + pokestop.lon + '&navigate=yes" title="Open in Waze">' +
                      '<img src="/static/img/navigation/othermaps.png" height="32" width="32">' +
                  '</a>' +
              '</div>' +
          '</div>' +
        '</div>' +
    '</div>'
  return content
}

function getGymPopupContent (gym) {
  const now = new Date()
  const raidBattleDate = new Date(gym.raid_battle_timestamp * 1000)
  const raidEndDate = new Date(gym.raid_end_timestamp * 1000)

  const isRaid = raidEndDate >= now && parseInt(gym.raid_level) > 0
  const isRaidBattle = (raidBattleDate <= now || (gym.raid_pokemon_id !== null && gym.raid_pokemon_id !== 0)) && isRaid

  var gymName = ''
  if (gym.name === null || gym.name === '') {
    gymName = 'Unknown Gym Name'
  } else {
    gymName = gym.name
  }

  var content =
    '<div class="row">' + // START 1ST ROW
        '<div class="col-12 col-md-8 center-vertical">' +
            '<span class="text-nowrap"><h6><b>' + gymName + '</b></h6></span>' +
        '</div>' +
        '<div class="col-6 col-md-4 center-vertical">' +
            '<div style="float:right; margin: auto;">' +
                '<img src="/static/img/team/' + gym.team_id + '.png" height="32" width="32">' +
            '</div>' +
        '</div>' +
    '</div>' // END 1ST ROW

  if (isRaid) {
    var hasRaidBoss = gym.raid_pokemon_id !== 0 && gym.raid_pokemon_id !== null
    var pokemonName
    if (hasRaidBoss && isRaidBattle) {
      if (gym.raid_pokemon_form !== 0 && gym.raid_pokemon_form !== null) {
        pokemonName = getFormName(gym.raid_pokemon_form) + ' ' + getPokemonName(gym.raid_pokemon_id)
      } else {
        pokemonName = getPokemonName(gym.raid_pokemon_id)
      }
      pokemonName += ' ' + getGenderIcon(gym.raid_pokemon_gender)
    } else if (isRaidBattle) {
      pokemonName = 'Unknown Raid Boss'
    } else {
      pokemonName = 'Level ' + gym.raid_level + ' Egg'
    }
    const pokemonIcon = getPokemonIconString(gym.raid_pokemon_id, gym.raid_pokemon_form, null, null)
    content +=
        '<div class="row" style="margin:auto;">' + // START 1ST ROW
            '<div class="col-6 col-md-4">' + // START 1ST COL
                '<div class="row" style="margin:auto;">'
    if (hasRaidBoss && isRaidBattle) {
      content += '<img src="/static/img/' + pokemonIcon + '" "height="64" width="64">'
    } else {
      content += '<img src="/static/img/egg/' + gym.raid_level + '.png" height="64" width="64">'
    }
    content +=
                '</div>' + // END POKEMON ROW
                '<div class="row" style="margin:auto;">'
    if (hasRaidBoss && isRaidBattle) {
      var pkmn = pokemonDb[gym.raid_pokemon_id]
      if (pkmn !== undefined && pkmn !== null) {
        var types = pkmn.types
        if (types !== null && types.length > 0) {
          content += '<div class="col text-nowrap">'
          if (types.length === 2) {
            content += '<img src="/static/img/type/' + types[0].type.toLowerCase() + '.png" height="16" width="16">&nbsp;'
            content += '<img src="/static/img/type/' + types[1].type.toLowerCase() + '.png" height="16" width="16">'
          } else {
            content += '<img src="/static/img/type/' + types[0].type.toLowerCase() + '.png" height="16" width="16">'
          }
          content += '</div>'
        }
      }
    }
    content +=
                '</div>' + // END TYPE ROW
            '</div>' + // END 1ST COLUMN
            '<div class="col-12 col-md-8 text-nowrap">' + // START 2ND COL
                '<h7><b>' + pokemonName + '</b></h7><br>'
    if (hasRaidBoss && isRaidBattle) {
      if (gym.raid_pokemon_cp !== null) {
        if (gym.raid_is_exclusive) {
          content += '<b>Level:</b> EX<br>'
        } else {
          content += '<b>Level:</b> ' + gym.raid_level + '<br>'
        }
      }
      if (gym.raid_pokemon_move_1 !== null) {
        var move1 = getMoveName(gym.raid_pokemon_move_1)
        if (move1 !== null) {
          content += '<b>Fast:</b> ' + move1 + '<br>'
        }
      }
      if (gym.raid_pokemon_move_2 !== null) {
        var move2 = getMoveName(gym.raid_pokemon_move_2)
        if (move2 !== null) {
          content += '<b>Charge:</b> ' + move2 + '<br>'
        }
      }
      if (gym.raid_pokemon_form !== null && gym.raid_pokemon_form > 0) {
        content += '<b>Form:</b> ' + getFormName(gym.raid_pokemon_form) + '<br>'
      }
    }
    if (gym.ex_raid_eligible) {
      content += '<img src="/static/img/misc/ex.png" height="24" width="32">'
    }
    content +=
            '</div>' + // END 2ND COL
        '</div><br>' // END 2ND ROW
  } else {
    content +=
        '<div class="row">' // START 3RD ROW
    var hasGymUrl = gym.url !== null
    if (hasGymUrl) {
      var teamClass = gym.team_id === 0
        ? 'team-neutral'
        : gym.team_id === 1
          ? 'team-mystic'
          : gym.team_id === 2
            ? 'team-valor'
            : gym.team_id === 3
              ? 'team-instinct'
              : ''
      var url = gym.url.replace('http://', 'https://')
      content +=
            '<div class="col-6 col-md-5">' + // START 1ST COL
                // '<a href="' + url + '" target="_blank"><img src="' + url + '" style="border-radius:50%; height:96px; width:96px;"></a>' +
                '<a href="' + url + '" target="_blank"><img src="' + url + '" class="circle-image ' + teamClass + '" style="height:96px; width:96px;"></a>' +
            '</div>' // END 1ST COL
    }
    content +=
            // '<div class="col-12 col-md-8 ' + (hasGymUrl ? 'text-center' : '') + ' center-vertical">' + //START 2ND COL
            '<div class="col-12 col-md-7 center-vertical p-4">' + // START 2ND COL
                '<b>Team:</b> ' + getTeamName(gym.team_id) + '<br>' +
                '<b>Slots Available:</b> ' + (gym.availble_slots === 0 ? 'Full' : gym.availble_slots === 6 ? 'Empty' : gym.availble_slots) + '<br>'
    if (gym.guard_pokemon_id !== null) {
      content += '<b>Guard:</b> ' + getPokemonName(gym.guard_pokemon_id) + '<br>'
    }
    if (gym.total_cp !== null) {
      content += '<b>Total CP:</b> ' + gym.total_cp.toLocaleString() + '<br>'
    }
    if (gym.in_battle) {
      content += '<b>Gym is under attack!</b><br>'
    }
    if (gym.ex_raid_eligible) {
      // content += '<b>Gym is EX-Raid eligible</b>';
      content += '<img src="/static/img/misc/ex.png" height="24" width="32">'
    }
    content +=
            '</div>' + // END 2ND COL
        '</div>' + // END 3RD ROW
        '<br>'
  }

  content += '<div class="text-center">'
  if (isRaid && !isRaidBattle) {
    content += '<b>Raid Start:</b> ' + raidBattleDate.toLocaleTimeString() + ' (' + getTimeUntill(raidBattleDate) + ')<br>'
  }
  if (isRaid) {
    content += '<b>Raid End:</b> ' + raidEndDate.toLocaleTimeString() + ' (' + getTimeUntill(raidEndDate) + ')<br><br>'
  }
  content += '</div>'

  const updatedDate = new Date(gym.updated * 1000)
  const modifiedDate = new Date(gym.last_modified_timestamp * 1000)
  if (updatedDate) {
    content += '<small><b>Last Updated:</b> ' + updatedDate.toLocaleDateString() + ' ' + updatedDate.toLocaleTimeString() + ' (' + getTimeSince(updatedDate) + ')<br></small>'
  }
  if (modifiedDate) {
    content += '<small><b>Last Modified:</b> ' + modifiedDate.toLocaleDateString() + ' ' + modifiedDate.toLocaleTimeString() + ' (' + getTimeSince(modifiedDate) + ')<br></small>'
  }

  content +=
    '<br>' +
    '<div class="text-center">' +
      '<a title="Direct Link" href="/@gym/'+gym.id+'"><b>[Direct Link]</b></a>' +
      '<br>' +
      '<br>' +
      '<div class="row text-center">' +
        '<div class="col">' +
          '<a href="https://www.google.com/maps/place/' + gym.lat + ',' + gym.lon + '" title="Open in Google Maps">' +
            '<img src="/static/img/navigation/gmaps.png" height="32" width="32">' +
          '</a>' +
        '</div>' +
        '<div class="col">' +
          '<a href="https://maps.apple.com/maps?daddr=' + gym.lat + ',' + gym.lon + '" title="Open in Apple Maps">' +
            '<img src="/static/img/navigation/applemaps.png" height="32" width="32">' +
          '</a>' +
        '</div>' +
        '<div class="col">' +
          '<a href="https://www.waze.com/ul?ll=' + gym.lat + ',' + gym.lon + '&navigate=yes" title="Open in Waze">' +
            '<img src="/static/img/navigation/othermaps.png" height="32" width="32">' +
          '</a>' +
        '</div>' +
      '</div>' +
    '</div>'
  return content
}

function getCellPopupContent (cell) {
  let content = '<center>'
  content += '<h6><b>Level ' + cell.level + ' S2 Cell</b></h6>'
  content += '<b>Id:</b> ' + cell.id + '<br>'

  const updatedDate = new Date(cell.updated * 1000)

  content += '<b>Last Updated:</b> ' + updatedDate.toLocaleTimeString() + ' (' + getTimeSince(updatedDate) + ')'
  content += '</center>'
  return content
}

function getSubmissionTypeCellPopupContent (cell) {
  let content = '<center>'
  content += '<h6><b>Level ' + cell.level + ' S2 Cell</b></h6>'
  content += '<b>Id:</b> ' + cell.id + '<br>'
  content += '<b>Total Count:</b> ' + cell.count + '<br>'
  content += '<b>Pokestop Count:</b> ' + cell.count_pokestops + '<br>'
  content += '<b>Gym Count:</b> ' + cell.count_gyms + '<br>'

  const gymThreshold = [2, 6, 20]

  if (cell.count_gyms < 3) {
    content += '<b>Submissions untill Gym:</b> ' + (gymThreshold[cell.count_gyms] - cell.count)
  } else {
    content += '<b>Submissions untill Gym:</b> Never'
  }

  if ((cell.count === 1 && cell.count_gyms < 1) || (cell.count === 5 && cell.count_gyms < 2) || (cell.count === 19 && cell.count_gyms < 3)) {
    content += '<br><b>Next submission will cause a Gym!'
  }

  content += '</center>'
  return content
}

function degreesToCardinal (d) {
  var dirs = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE',
    'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW']
  var ix = Math.floor((d + 11.25) / 22.5 - 0.02)
  return dirs[ix % 16]
}

function getWeatherPopupContent (weather) {
  const weatherName = weatherTypes[weather.gameplay_condition].name
  const weatherType = weatherTypes[weather.gameplay_condition].types

  let content = '<center>'
  content += '<h6><b>' + weatherName + '</b><br></h6>'
  content += '<b>Boosted Types:</b><br>' + weatherType + '<br>'
  content += '<b>Cell ID:</b> ' + weather.id + '<br>'
  content += '<b>Cell Level:</b> ' + weather.level + '<br>'
  content += '<b>Lat:</b> ' + weather.latitude + '<br>'
  content += '<b>Lon:</b> ' + weather.longitude + '<br>'
  content += '<b>Gameplay Condition:</b> ' + weather.gameplay_condition + '<br>'
  content += '<b>Wind Direction:</b> ' + weather.wind_direction + '° (' + degreesToCardinal(weather.wind_direction) + ')<br>'
  content += '<b>Cloud Level:</b> ' + weather.cloud_level + '<br>'
  content += '<b>Rain Level:</b> ' + weather.rain_level + '<br>'
  content += '<b>Wind Level:</b> ' + weather.wind_level + '<br>'
  content += '<b>Snow Level:</b> ' + weather.snow_level + '<br>'
  content += '<b>Fog Level:</b> ' + weather.fog_level + '<br>'
  content += '<b>Special Effects Level:</b> ' + weather.special_effect_level + '<br>'
  content += '<b>Severity:</b> ' + weather.severity + '<br>'
  content += '<b>Weather Warning:</b> ' + weather.warn_weather + '<br><br>'

  const updatedDate = new Date(weather.updated * 1000)

  content += '<b>Last Updated:</b> ' + updatedDate.toLocaleTimeString() + ' (' + getTimeSince(updatedDate) + ')'
  content += '</center>'
  return content
}

// MARK: - Translation

function getPokemonNameNoId (pokemonId) {
  return i18n('poke_' + pokemonId)
}

function getPokemonName (pokemonId) {
  return i18n('poke_' + pokemonId) + ' (#' + pokemonId + ')'
}

function getThrowType (typeID) {
  return i18n('throw_type_' + typeID)
}

function getPokemonType (typeId) {
  return i18n('poke_type_' + typeId)
}

function getFormName (formId) {
  return i18n('form_' + formId)
}

function getMoveName (moveId) {
  return i18n('move_' + moveId)
}

// function getWeatherName (weatherId) {
//  return i18n('weather_' + weatherId)
// }

function getQuestName (questId, amount) {
  return i18n('quest_' + questId, { amount: amount })
}

function getItemName (itemId) {
  return i18n('item_' + itemId)
}

function getLureName (lureId) {
  return i18n('lure_' + lureId)
}

function getGruntName (gruntId) {
  return i18n('grunt_' + gruntId)
}

function getTeamName (teamId) {
  return i18n('filter_gym_team_' + teamId)
}

function getGenderIcon (genderId) {
  return i18n('gender_icon_' + genderId)
}

// function getWeatherIcon (weatherId) {
//  return i18n('weather_icon_' + weatherId)
// }

function getAlignmentName (alignmentId) {
  return i18n('alignment_' + alignmentId)
}

function getCharacterCategoryName (characterCategoryId) {
  return i18n('character_category_' + characterCategoryId)
}

function getQuestReward (reward) {
  const id = reward.type
  const info = reward.info

  if (id === 1 && info !== undefined && info.amount !== undefined) {
    return i18n('quest_reward_1_formatted', { amount: info.amount })
  } else if (id === 2 && info !== undefined && info.amount !== undefined && info.item_id !== undefined) {
    return i18n('quest_reward_2_formatted', { amount: info.amount, item: getItemName(info.item_id) })
  } else if (id === 3 && info !== undefined && info.amount !== undefined) {
    return i18n('quest_reward_3_formatted', { amount: info.amount })
  } else if (id === 4 && info !== undefined && info.amount !== undefined && info.pokemon_id !== undefined) {
    return i18n('quest_reward_4_formatted', { amount: info.amount, pokemon: getPokemonName(info.pokemon_id) })
  } else if (id === 7 && info !== undefined && info.pokemon_id !== undefined) {
    var string
    if (info.form_id !== 0 && info.form_id !== null) {
      string = getFormName(info.form_id) + ' ' + getPokemonName(info.pokemon_id)
    } else {
      string = getPokemonName(info.pokemon_id)
    }
    if (info.shiny) {
      string += ' (Shiny)'
    }
    return string
  } else if (id === 8 && info !== undefined && info.amount !== undefined) {
    return i18n('quest_reward_8_formatted', { amount: info.amount })
  } else {
    return i18n('quest_reward_' + id)
  }
}

function getQuestCondition (condition) {
  const id = condition.type
  const info = condition.info

  if (id === 1 && info !== undefined && info.pokemon_type_ids !== undefined) {
    let typesString = ''
    $.each(info.pokemon_type_ids, function (index, typeId) {
      let formatted
      if (index === 0) {
        formatted = ''
      } else if (index === info.pokemon_type_ids.length - 1) {
        formatted = ' or '
      } else {
        formatted = ', '
      }
      typesString += formatted + getPokemonType(typeId)
    })
    return i18n('quest_condition_1_formatted', { types: typesString })
  } else if (id === 2 && info !== undefined && info.pokemon_ids !== undefined) {
    let pokemonString = ''
    $.each(info.pokemon_ids, function (index, pokemonId) {
      let formatted
      if (index === 0) {
        formatted = ''
      } else if (index === info.pokemon_ids.length - 1) {
        formatted = ' or '
      } else {
        formatted = ', '
      }
      pokemonString += formatted + getPokemonNameNoId(pokemonId)
    })
    return i18n('quest_condition_2_formatted', { pokemon: pokemonString })
  } else if (id === 7 && info !== undefined && info.raid_levels !== undefined) {
    let levelsString = ''
    $.each(info.raid_levels, function (index, level) {
      let formatted
      if (index === 0) {
        formatted = ''
      } else if (index === info.raid_levels.length - 1) {
        formatted = ' or '
      } else {
        formatted = ', '
      }
      levelsString += formatted + level
    })
    return i18n('quest_condition_7_formatted', { levels: levelsString })
  } else if (id === 8 && info !== undefined && info.throw_type_id !== undefined) {
    return i18n('quest_condition_8_formatted', { throw_type: getThrowType(info.throw_type_id) })
  } else if (id === 11 && info !== undefined && info.item_id !== undefined) {
    return i18n('quest_condition_11_formatted', { item: getItemName(info.item_id) })
  } else if (id === 14 && info !== undefined && info.throw_type_id !== undefined) {
    return i18n('quest_condition_14_formatted', { throw_type: getThrowType(info.throw_type_id) })
  } else if (id === 26 && info !== undefined && info.alignment_ids !== undefined) {
    let alignmentsString = ''
    $.each(info.alignment_ids, function (index, alignment) {
      let formatted
      if (index === 0) {
        formatted = ''
      } else if (index === info.alignment_ids.length - 1) {
        formatted = ' or '
      } else {
        formatted = ', '
      }
      alignmentsString += formatted + getAlignmentName(alignment)
    })
    return i18n('quest_condition_26_formatted', { alignments: alignmentsString })
  } else if (id === 27 && info !== undefined && info.character_category_ids !== undefined) {
    let categoriesString = ''
    $.each(info.character_category_ids, function (index, characterCategory) {
      let formatted
      if (index === 0) {
        formatted = ''
      } else if (index === info.character_category_ids.length - 1) {
        formatted = ' or '
      } else {
        formatted = ', '
      }
      categoriesString += formatted + getCharacterCategoryName(characterCategory)
    })
    return i18n('quest_condition_27_formatted', { categories: categoriesString })
  } else {
    return i18n('quest_condition_' + id)
  }
}

// MARK: - Markers

function getCellMarker (cell, ts) {
  const polygon = L.polygon(cell.polygon, {
    forceZIndex: 1
  })
  polygon.setStyle(getCellStyle(cell, ts))
  polygon.bindPopup(getCellPopupContent(cell))
  polygon.on('popupopen', function () {
    openedCell = cell
    polygon._popup.setContent(getCellPopupContent(cell))
  })
  return polygon
}

function getCellStyle (cell, ts) {
  const ago = ts - cell.updated
  let value
  if (ago <= 150) {
    value = 0
  } else {
    value = Math.min((ago - 150) / 750, 1)
  }
  const hue = ((1 - value) * 120).toString(10)
  return { fillColor: ['hsl(', hue, ',100%,50%)'].join(''), color: 'black', opacity: 0.75, fillOpacity: 0.5, weight: 0.5 }
}

function getSubmissionPlacementCellMarker (cell, ts) {
  const polygon = L.polygon(cell.polygon, { forceZIndex: 2, interactive: false })
  polygon.setStyle(getSubmissionPlacementCellStyle(cell, ts))
  return polygon
}

// eslint-disable-next-line no-unused-vars
function getSubmissionPlacementCellStyle (cell, ts) {
  if (cell.blocked) {
    return { fillColor: 'black', color: 'black', opacity: 0.75, fillOpacity: 0.25, weight: 0.1 }
  } else {
    return { fillColor: 'green', color: 'black', opacity: 0.75, fillOpacity: 0.0, weight: 0.1 }
  }
}

function getSubmissionPlacementRingMarker (ring, ts) {
  const circle = L.circle([ring.lat, ring.lon], {
    radius: ring.radius,
    forceZIndex: 4,
    interactive: false
  })
  circle.setStyle(getSubmissionPlacementRingStyle(ring, ts))
  return circle
}

// eslint-disable-next-line no-unused-vars
function getSubmissionPlacementRingStyle (cell, ts) {
  return { fillColor: 'blue', color: 'black', opacity: 0.75, fillOpacity: 0.25, weight: 0.1 }
}

function getSubmissionTypeCellMarker (cell, ts) {
  const polygon = L.polygon(cell.polygon, { forceZIndex: 3 })
  polygon.setStyle(getSubmissionTypeCellStyle(cell, ts))
  polygon.bindPopup(getSubmissionTypeCellPopupContent(cell))
  polygon.bindTooltip('' + cell.count + '', {
    permanent: true,
    direction: 'center',
    className: 'labelstyle'
  })
  polygon.on('popupopen', function () {
    openedSubmissionTypeCell = cell
    polygon._popup.setContent(getSubmissionTypeCellPopupContent(cell))
  })
  return polygon
}

// eslint-disable-next-line no-unused-vars
function getSubmissionTypeCellStyle (cell, ts) {
  if ((cell.count === 1 && cell.count_gyms < 1) || (cell.count === 5 && cell.count_gyms < 2) || (cell.count === 19 && cell.count_gyms < 3)) {
    return { fillColor: 'red', color: 'red', opacity: 0.75, fillOpacity: 0.5, weight: 0.75 }
  } else if ((cell.count === 4 && cell.count_gyms < 2) || (cell.count === 18 && cell.count_gyms < 3)) {
    return { fillColor: 'orange', color: 'red', opacity: 0.75, fillOpacity: 0.5, weight: 0.75 }
  } else if (cell.count >= 20) {
    return { fillColor: 'black', color: 'black', opacity: 0.75, fillOpacity: 0.25, weight: 0.75 }
  } else {
    return { fillColor: 'blue', color: 'black', opacity: 0.75, fillOpacity: 0.0, weight: 0.75 }
  }
}

function getWeatherMarker (weather, ts) {
  const polygon = L.polygon(weather.polygon)
  polygon.setStyle(getWeatherStyle(weather, ts))
  polygon.bindPopup(getWeatherPopupContent(weather))
  polygon.on('popupopen', function () {
    openedWeather = weather
    polygon._popup.setContent(getWeatherPopupContent(weather))
  })
  return polygon
}

function getWeatherStyle (weather, ts) {
  const ago = ts - weather.updated
  let value
  if (ago <= 150) {
    value = 0
  } else {
    value = Math.min((ago - 150) / 1800, 1)
  }
  const hue = ((1 - value) * 120).toString(10)
  return { fillColor: ['hsl(', hue, ',100%,50%)'].join(''), color: 'black', opacity: 0.75, fillOpacity: 0.5, weight: 1.0 }
}

// eslint-disable-next-line no-unused-vars
function getPokemonMarkerIcon (pokemon, ts) {
  const size = getPokemonSize(pokemon.pokemon_id)

  const pokemonIdString = getPokemonIconString(pokemon.pokemon_id, pokemon.form, pokemon.pvp_rankings_great_league, pokemon.pvp_rankings_ultra_league)
  const icon = L.icon({
    iconUrl: '/static/img/' + pokemonIdString,
    iconSize: [size, size],
    iconAnchor: [size / 2, size / 2],
    popupAnchor: [0, -(size / 2)]
  })
  return icon
}

function getPokemonMarker (pokemon, ts) {
  let zIndex
  if (pokemon.is_start) {
    zIndex = 1000
  } else {
    zIndex = 40 + getPokemonIndex(pokemon)
  }
  const marker = L.marker([pokemon.lat, pokemon.lon], {
    icon: getPokemonMarkerIcon(pokemon, ts),
    forceZIndex: zIndex,
    virtual: true
  })
  marker.bindPopup('')
  marker.on('popupopen', function () {
    openedPokemon = pokemon
    marker._popup.setContent(getPokemonPopupContent(pokemon))
  })
  return marker
}

function getPokestopMarkerIcon (pokestop, ts) {
  let icon
  if ((showQuests || pokestop.is_start) && pokestop.quest_type !== null && pokestop.quest_rewards[0] !== undefined) {
    const id = pokestop.quest_rewards[0].type
    const info = pokestop.quest_rewards[0].info

    let rewardString

    if (id === 1 && info !== undefined && info.amount !== undefined) {
      rewardString = 'i-2'
    } else if (id === 2 && info !== undefined && info.amount !== undefined && info.item_id !== undefined) {
      rewardString = 'i' + info.item_id
    } else if (id === 3 && info !== undefined && info.amount !== undefined) {
      rewardString = 'i-1'
    } else if (id === 4 && info !== undefined && info.amount !== undefined && info.pokemon_id !== undefined) {
      rewardString = 'i-3'
    } else if (id === 7 && info !== undefined && info.pokemon_id !== undefined) {
      if (info.form_id !== 0 && info.form_id !== null) {
        const pokemonIdStringTmp = '' + info.pokemon_id + '-' + info.form_id
        if ($.inArray(pokemonIdStringTmp, avilableForms) !== -1) {
          rewardString = 'p' + pokemonIdStringTmp
        } else {
          rewardString = 'p' + info.pokemon_id
        }
      } else {
        rewardString = 'p' + info.pokemon_id
      }
    } else {
      rewardString = 'i0'
    }
    const size = getQuestSize(rewardString)

    let lureId
    if (pokestop.lure_expire_timestamp >= ts) {
      lureId = getLureIconId(pokestop.lure_id)
    } else {
      lureId = 0
    }

    let invasionString
    let invasionStringEnd
    let folder
    if ((pokestop.is_start || pokestopFilter.invasion.show === true) && pokestop.incident_expire_timestamp >= ts) {
      invasionString = 'i'
      invasionStringEnd = '_' + pokestop.grunt_type
      folder = 'quest_invasion'
    } else {
      invasionString = ''
      invasionStringEnd = ''
      folder = 'quest'
    }
    icon = L.icon({
      iconUrl: '/static/img/' + folder + '/' + invasionString + lureId + '_' + rewardString + invasionStringEnd + '.png',
      iconSize: [size, size * 1.667],
      iconAnchor: [size / 2, size * 1.567],
      popupAnchor: [0, size * -1.567]
    })
  } else {
    let lureId
    if (pokestop.lure_expire_timestamp >= ts) {
      lureId = getLureIconId(pokestop.lure_id)
    } else {
      lureId = 0
    }
    let invasionString
    let invasionStringEnd
    let folder
    if ((pokestop.is_start || pokestopFilter.invasion.show === true) && pokestop.incident_expire_timestamp >= ts) {
      invasionString = 'i'
      invasionStringEnd = '_' + pokestop.grunt_type
      folder = 'invasion'
    } else {
      invasionString = ''
      invasionStringEnd = ''
      folder = 'pokestop'
    }

    var sizeId = 'normal'
    if (lureId > 0) {
      sizeId = 'l' + getLureIconId(pokestop.lure_id)
    } else if (pokestop.incident_expire_timestamp >= ts) {
      sizeId = 'invasion'
    }
    const size = getPokestopSize(sizeId)
    icon = L.icon({
      iconUrl: '/static/img/' + folder + '/' + invasionString + lureId + invasionStringEnd + '.png',
      iconSize: [size, size],
      iconAnchor: [size / 2, size],
      popupAnchor: [0, size * -1.567]
    })
  }
  return icon
}

function getPokestopMarker (pokestop, ts) {
  let zIndex
  if ((showQuests || pokestop.is_start) && pokestop.quest_type !== null && pokestop.quest_rewards[0] !== undefined) {
    let rewardString
    const id = pokestop.quest_rewards[0].type
    const info = pokestop.quest_rewards[0].info
    if (id === 1 && info !== undefined && info.amount !== undefined) {
      rewardString = 'i-2'
    } else if (id === 2 && info !== undefined && info.amount !== undefined && info.item_id !== undefined) {
      rewardString = 'i' + info.item_id
    } else if (id === 3 && info !== undefined && info.amount !== undefined) {
      rewardString = 'i-1'
    } else if (id === 4 && info !== undefined && info.amount !== undefined && info.pokemon_id !== undefined) {
      rewardString = 'i-3'
    } else if (id === 7 && info !== undefined && info.pokemon_id !== undefined) {
      rewardString = 'p' + info.pokemon_id
    } else {
      rewardString = 'i0'
    }
    if (pokestop.is_start) {
      zIndex = 1000
    } else {
      zIndex = getQuestIndex(rewardString)
    }
  } else {
    zIndex = 0
  }

  const marker = L.marker([pokestop.lat, pokestop.lon], {
    icon: getPokestopMarkerIcon(pokestop, ts),
    forceZIndex: 20 + zIndex,
    virtual: true
  })
  marker.bindPopup(pokestop.name)
  marker.on('popupopen', function () {
    openedPokestop = pokestop
    marker._popup.setContent(getPokestopPopupContent(pokestop))
  })
  return marker
}

// eslint-disable-next-line no-unused-vars
function getSpawnpointMarkerIcon (spawnpoint, ts) {
  var iconId = spawnpoint.despawn_second != null ? 1 : 0
  const icon = L.icon({
    iconUrl: '/static/img/spawnpoint/' + iconId + '.png',
    iconSize: [10, 10],
    iconAnchor: [5, 5],
    popupAnchor: [0, -5]
  })
  return icon
}

function getSpawnpointMarker (spawnpoint, ts) {
  const marker = L.marker([spawnpoint.lat, spawnpoint.lon], {
    icon: getSpawnpointMarkerIcon(spawnpoint, ts),
    forceZIndex: 10,
    virtual: true
  })
  var content = '<center><h6><b>Spawnpoint</b></h6></center>'
  var hasTimer = spawnpoint.despawn_second != null
  if (hasTimer) {
    var timer = Math.round(spawnpoint.despawn_second / 60)
    content += '<br><b>Despawn Timer:</b> ' + timer + ' minutes'
  }
  marker.bindPopup(content)
  return marker
}

function getGymMarkerIcon (gym, ts) {
  let size
  if (gym.availble_slots === 6 || gym.team_id === 0) {
    size = 0
  } else {
    size = (6 - gym.availble_slots)
  }

  const raidLevel = gym.raid_level
  let icon
  let iconSize
  if (gym.raid_battle_timestamp <= ts && gym.raid_end_timestamp >= ts && (showRaids || gym.is_start) && parseInt(gym.raid_level) > 0) {
    if (gym.raid_pokemon_id !== 0 && gym.raid_pokemon_id !== null) {
      const pokemonIdString = getPokemonIdIconString(gym.raid_pokemon_id, gym.raid_pokemon_form)
      // Raid Boss
      iconSize = getRaidSize('p' + gym.raid_pokemon_id)
      icon = L.icon({
        iconUrl: '/static/img/raid/' + gym.team_id + '_' + size + '_' + pokemonIdString + '.png',
        iconSize: [iconSize, iconSize * 1.667],
        iconAnchor: [iconSize / 2, iconSize * 1.567],
        popupAnchor: [0, iconSize * -1.567]
      })
    } else {
      // Egg
      iconSize = getRaidSize('l' + raidLevel)
      icon = L.icon({
        iconUrl: '/static/img/raid/' + gym.team_id + '_' + size + '_ue' + raidLevel + '.png',
        iconSize: [iconSize, iconSize * 1.667],
        iconAnchor: [iconSize / 2, iconSize * 1.567],
        popupAnchor: [0, iconSize * -1.567]
      })
    }
  } else if (gym.raid_end_timestamp >= ts && parseInt(gym.raid_level) > 0 && (showRaids || gym.is_start)) {
    // Egg
    iconSize = getRaidSize('l' + raidLevel)
    icon = L.icon({
      iconUrl: '/static/img/raid/' + gym.team_id + '_' + size + '_e' + raidLevel + '.png',
      iconSize: [iconSize, iconSize * 1.667],
      iconAnchor: [iconSize / 2, iconSize * 1.567],
      popupAnchor: [0, iconSize * -1.567]
    })
  } else {
    // Gym
    iconSize = getGymSize(gym.team_id)
    icon = L.icon({
      iconUrl: '/static/img/gym/' + gym.team_id + '_' + size + '.png',
      iconSize: [iconSize, iconSize],
      iconAnchor: [iconSize / 2, iconSize / 2],
      popupAnchor: [0, -20] // TODO: //size * -1.567
    })
  }
  return icon
}

function getGymMarker (gym, ts) {
  let zIndex
  if (gym.is_start) {
    zIndex = 1000
  } else if ((showRaids || gym.is_start) && gym.raid_end_timestamp >= ts) {
    zIndex = gym.raid_level
  } else {
    zIndex = 0
  }

  const marker = L.marker([gym.lat, gym.lon], {
    icon: getGymMarkerIcon(gym, ts),
    forceZIndex: 30 + zIndex,
    virtual: true
  })
  marker.bindPopup(gym.name)
  marker.on('popupopen', function () {
    openedGym = gym
    marker._popup.setContent(getGymPopupContent(gym))
  })

  return marker
}

function getDeviceMarkerIcon (device, ts) {
  var isOffline = isDeviceOffline(device, ts)
  return isOffline ? deviceOfflineIcon : deviceOnlineIcon
}

function getDeviceMarker (device, ts) {
  const marker = L.marker([device.last_lat || 1.0, device.last_lon || 1.0], {
    icon: getDeviceMarkerIcon(device, ts),
    forceZIndex: 10,
    virtual: true
  })
  marker.bindPopup('')
  marker.on('popupopen', function () {
    openedDevice = device
    marker._popup.setContent(getDevicePopupContent(device))
  })
  return marker
}

function getDevicePopupContent (device) {
  const lastSeenDate = new Date(device.last_seen * 1000)
  var lastSeen = lastSeenDate.toLocaleTimeString() + ' (' + getTimeSince(lastSeenDate) + ')'
  const ts = Math.round((new Date()).getTime() / 1000)
  var isOffline = isDeviceOffline(device, ts)
  var content = '<center><h6><b>' + device.uuid + '</b></h6></center><br>' +
        '<b>Instance:</b> ' + device.instance_name + '<br>' +
        '<b>Last Seen:</b> ' + lastSeen + '<br>' +
        '<b>Status:</b> ' + (isOffline ? 'Offline' : 'Online')
  return content
}

function isDeviceOffline (device, ts) {
  var delta = 15 * 60
  var isOffline = device.last_seen > (ts - delta) ? 0 : 1
  return isOffline
}

function setDespawnTimer (gym) {
  var date = new Date()
  var ts = date.getTime() / 1000
  var raidTimestamp = 0
  if (gym.raid_battle_timestamp <= ts && gym.raid_end_timestamp >= ts && parseInt(gym.raid_level) > 0 && (showRaids || gym.is_start)) {
    // Hatched
    raidTimestamp = gym.raid_end_timestamp
  } else if (gym.raid_battle_timestamp >= ts && gym.raid_end_timestamp >= ts && parseInt(gym.raid_level) > 0 && (showRaids || gym.is_start)) {
    // Egg
    raidTimestamp = gym.raid_battle_timestamp
  } else {
    gym.marker.unbindTooltip()
    gym.marker.timerSet = false
  }

  if (raidTimestamp > 0) {
    var timer = getTimeUntill(new Date(raidTimestamp * 1000))
    if (gym.marker.timerSet) {
      var text = "<div class='rounded raid-timer'><span class='p-1'>" + timer + '</span></div>'
      gym.marker.setTooltipContent(text)
    } else {
      var options = { permanent: true, className: 'leaflet-tooltip', direction: 'bottom', offset: [0, 0] }
      /* var tooltip = */ gym.marker.bindTooltip(timer, options)
      gym.marker.timerSet = true
    }
  }
}

// MARK: - Misc

function manageSelectButton (e, isNew) {
  const id = e.attr('data-id')
  const type = e.attr('data-type')
  const info = e.attr('data-info')
  var shouldShow = false
  if (type === 'pokemon' || type === 'pokemon-iv') {
    switch (info) {
      case 'hide':
        shouldShow = pokemonFilterNew[id].show === false
        break
      case 'show':
        shouldShow = pokemonFilterNew[id].show === true
        break
      case 'iv':
        shouldShow = pokemonFilterNew[id].show === 'filter'
        break
      case 'small':
        shouldShow = pokemonFilterNew[id].size === 'small'
        break
      case 'normal':
        shouldShow = pokemonFilterNew[id].size === 'normal'
        break
      case 'large':
        shouldShow = pokemonFilterNew[id].size === 'large'
        break
      case 'huge':
        shouldShow = pokemonFilterNew[id].size === 'huge'
        break
      case 'off':
        shouldShow = !pokemonFilterNew['iv_' + id].on
        break
      case 'on':
        shouldShow = pokemonFilterNew['iv_' + id].on
        break
    }
  } else if (type === 'quest-misc') {
    switch (info) {
      case 'hide':
        shouldShow = questFilterNew['i' + -id].show === false
        break
      case 'show':
        shouldShow = questFilterNew['i' + -id].show === true
        break
      case 'small':
        shouldShow = questFilterNew['i' + -id].size === 'small'
        break
      case 'normal':
        shouldShow = questFilterNew['i' + -id].size === 'normal'
        break
      case 'large':
        shouldShow = questFilterNew['i' + -id].size === 'large'
        break
      case 'huge':
        shouldShow = questFilterNew['i' + -id].size === 'huge'
        break
    }
  } else if (type === 'quest-item') {
    switch (info) {
      case 'hide':
        shouldShow = questFilterNew['i' + id].show === false
        break
      case 'show':
        shouldShow = questFilterNew['i' + id].show === true
        break
      case 'small':
        shouldShow = questFilterNew['i' + id].size === 'small'
        break
      case 'normal':
        shouldShow = questFilterNew['i' + id].size === 'normal'
        break
      case 'large':
        shouldShow = questFilterNew['i' + id].size === 'large'
        break
      case 'huge':
        shouldShow = questFilterNew['i' + id].size === 'huge'
        break
    }
  } else if (type === 'quest-pokemon') {
    switch (info) {
      case 'hide':
        shouldShow = questFilterNew['p' + id].show === false
        break
      case 'show':
        shouldShow = questFilterNew['p' + id].show === true
        break
      case 'small':
        shouldShow = questFilterNew['p' + id].size === 'small'
        break
      case 'normal':
        shouldShow = questFilterNew['p' + id].size === 'normal'
        break
      case 'large':
        shouldShow = questFilterNew['p' + id].size === 'large'
        break
      case 'huge':
        shouldShow = questFilterNew['p' + id].size === 'huge'
        break
    }
  } else if (type === 'raid-timers') {
    switch (info) {
      case 'hide':
        shouldShow = raidFilterNew[id].show === false
        break
      case 'show':
        shouldShow = raidFilterNew[id].show === true
        break
      case 'small':
        shouldShow = raidFilterNew[id].size === 'small'
        break
      case 'normal':
        shouldShow = raidFilterNew[id].size === 'normal'
        break
      case 'large':
        shouldShow = raidFilterNew[id].size === 'large'
        break
      case 'huge':
        shouldShow = raidFilterNew[id].size === 'huge'
        break
    }
  } else if (type === 'raid-level') {
    switch (info) {
      case 'hide':
        shouldShow = raidFilterNew['l' + id].show === false
        break
      case 'show':
        shouldShow = raidFilterNew['l' + id].show === true
        break
      case 'small':
        shouldShow = raidFilterNew['l' + id].size === 'small'
        break
      case 'normal':
        shouldShow = raidFilterNew['l' + id].size === 'normal'
        break
      case 'large':
        shouldShow = raidFilterNew['l' + id].size === 'large'
        break
      case 'huge':
        shouldShow = raidFilterNew['l' + id].size === 'huge'
        break
    }
  } else if (type === 'raid-pokemon') {
    switch (info) {
      case 'hide':
        shouldShow = raidFilterNew['p' + id].show === false
        break
      case 'show':
        shouldShow = raidFilterNew['p' + id].show === true
        break
      case 'small':
        shouldShow = raidFilterNew['p' + id].size === 'small'
        break
      case 'normal':
        shouldShow = raidFilterNew['p' + id].size === 'normal'
        break
      case 'large':
        shouldShow = raidFilterNew['p' + id].size === 'large'
        break
      case 'huge':
        shouldShow = raidFilterNew['p' + id].size === 'huge'
        break
    }
  } else if (type === 'gym-team') {
    switch (info) {
      case 'hide':
        shouldShow = gymFilterNew['t' + id].show === false
        break
      case 'show':
        shouldShow = gymFilterNew['t' + id].show === true
        break
      case 'small':
        shouldShow = gymFilterNew['t' + id].size === 'small'
        break
      case 'normal':
        shouldShow = gymFilterNew['t' + id].size === 'normal'
        break
      case 'large':
        shouldShow = gymFilterNew['t' + id].size === 'large'
        break
      case 'huge':
        shouldShow = gymFilterNew['t' + id].size === 'huge'
        break
    }
  } else if (type === 'gym-ex') {
    switch (info) {
      case 'hide':
        shouldShow = gymFilterNew[id].show === false
        break
      case 'show':
        shouldShow = gymFilterNew[id].show === true
        break
      case 'small':
        shouldShow = gymFilterNew[id].size === 'small'
        break
      case 'normal':
        shouldShow = gymFilterNew[id].size === 'normal'
        break
      case 'large':
        shouldShow = gymFilterNew[id].size === 'large'
        break
      case 'huge':
        shouldShow = gymFilterNew[id].size === 'huge'
        break
    }
  } else if (type === 'gym-slots') {
    switch (info) {
      case 'hide':
        shouldShow = gymFilterNew['s' + id].show === false
        break
      case 'show':
        shouldShow = gymFilterNew['s' + id].show === true
        break
      case 'small':
        shouldShow = gymFilterNew['s' + id].size === 'small'
        break
      case 'normal':
        shouldShow = gymFilterNew['s' + id].size === 'normal'
        break
      case 'large':
        shouldShow = gymFilterNew['s' + id].size === 'large'
        break
      case 'huge':
        shouldShow = gymFilterNew['s' + id].size === 'huge'
        break
    }
  } else if (type === 'pokestop-normal') {
    switch (info) {
      case 'hide':
        shouldShow = pokestopFilterNew[id].show === false
        break
      case 'show':
        shouldShow = pokestopFilterNew[id].show === true
        break
      case 'small':
        shouldShow = pokestopFilterNew[id].size === 'small'
        break
      case 'normal':
        shouldShow = pokestopFilterNew[id].size === 'normal'
        break
      case 'large':
        shouldShow = pokestopFilterNew[id].size === 'large'
        break
      case 'huge':
        shouldShow = pokestopFilterNew[id].size === 'huge'
        break
    }
  } else if (type === 'pokestop-lure') {
    switch (info) {
      case 'hide':
        shouldShow = pokestopFilterNew['l' + id].show === false
        break
      case 'show':
        shouldShow = pokestopFilterNew['l' + id].show === true
        break
      case 'small':
        shouldShow = pokestopFilterNew['l' + id].size === 'small'
        break
      case 'normal':
        shouldShow = pokestopFilterNew['l' + id].size === 'normal'
        break
      case 'large':
        shouldShow = pokestopFilterNew['l' + id].size === 'large'
        break
      case 'huge':
        shouldShow = pokestopFilterNew['l' + id].size === 'huge'
        break
    }
  } else if (type === 'pokestop-invasion') {
    switch (info) {
      case 'hide':
        shouldShow = pokestopFilterNew[id].show === false
        break
      case 'show':
        shouldShow = pokestopFilterNew[id].show === true
        break
      case 'small':
        shouldShow = pokestopFilterNew[id].size === 'small'
        break
      case 'normal':
        shouldShow = pokestopFilterNew[id].size === 'normal'
        break
      case 'large':
        shouldShow = pokestopFilterNew[id].size === 'large'
        break
      case 'huge':
        shouldShow = pokestopFilterNew[id].size === 'huge'
        break
    }
  } else if (type === 'spawnpoint-timer') {
    switch (info) {
      case 'hide':
        shouldShow = spawnpointFilterNew[id].show === false
        break
      case 'show':
        shouldShow = spawnpointFilterNew[id].show === true
        break
      case 'small':
        shouldShow = spawnpointFilterNew[id].size === 'small'
        break
      case 'normal':
        shouldShow = spawnpointFilterNew[id].size === 'normal'
        break
      case 'large':
        shouldShow = spawnpointFilterNew[id].size === 'large'
        break
      case 'huge':
        shouldShow = spawnpointFilterNew[id].size === 'huge'
        break
    }
  } else {
    shouldShow = false
  }

  if (shouldShow) {
    e.addClass('active')
  } else {
    e.removeClass('active')
  }

  if (isNew) {
    e.removeClass('select-button-new')
    e.addClass('select-button')
    e.on('click', function (e) {
      e.preventDefault()
      if (type === 'pokemon' || type === 'pokemon-iv') {
        switch (info) {
          case 'hide':
            pokemonFilterNew[id].show = false
            break
          case 'show':
            pokemonFilterNew[id].show = true
            break
          case 'iv':
            return manageIVPopup(id, pokemonFilterNew)
          case 'small':
            pokemonFilterNew[id].size = 'small'
            break
          case 'normal':
            pokemonFilterNew[id].size = 'normal'
            break
          case 'large':
            pokemonFilterNew[id].size = 'large'
            break
          case 'huge':
            pokemonFilterNew[id].size = 'huge'
            break
          case 'off':
            pokemonFilterNew['iv_' + id].on = false
            break
          case 'on':
            pokemonFilterNew['iv_' + id].on = true
            break
        }
      } else if (type === 'quest-misc') {
        switch (info) {
          case 'hide':
            questFilterNew['i' + -id].show = false
            break
          case 'show':
            questFilterNew['i' + -id].show = true
            break
          case 'small':
            questFilterNew['i' + -id].size = 'small'
            break
          case 'normal':
            questFilterNew['i' + -id].size = 'normal'
            break
          case 'large':
            questFilterNew['i' + -id].size = 'large'
            break
          case 'huge':
            questFilterNew['i' + -id].size = 'huge'
            break
        }
      } else if (type === 'quest-item') {
        switch (info) {
          case 'hide':
            questFilterNew['i' + id].show = false
            break
          case 'show':
            questFilterNew['i' + id].show = true
            break
          case 'small':
            questFilterNew['i' + id].size = 'small'
            break
          case 'normal':
            questFilterNew['i' + id].size = 'normal'
            break
          case 'large':
            questFilterNew['i' + id].size = 'large'
            break
          case 'huge':
            questFilterNew['i' + id].size = 'huge'
            break
        }
      } else if (type === 'quest-pokemon') {
        switch (info) {
          case 'hide':
            questFilterNew['p' + id].show = false
            break
          case 'show':
            questFilterNew['p' + id].show = true
            break
          case 'small':
            questFilterNew['p' + id].size = 'small'
            break
          case 'normal':
            questFilterNew['p' + id].size = 'normal'
            break
          case 'large':
            questFilterNew['p' + id].size = 'large'
            break
          case 'huge':
            questFilterNew['p' + id].size = 'huge'
            break
        }
      } else if (type === 'raid-timers') {
        switch (info) {
          case 'hide':
            raidFilterNew[id].show = false
            break
          case 'show':
            raidFilterNew[id].show = true
            break
          case 'small':
            raidFilterNew[id].size = 'small'
            break
          case 'normal':
            raidFilterNew[id].size = 'normal'
            break
          case 'large':
            raidFilterNew[id].size = 'large'
            break
          case 'huge':
            raidFilterNew[id].size = 'huge'
            break
        }
      } else if (type === 'raid-level') {
        switch (info) {
          case 'hide':
            raidFilterNew['l' + id].show = false
            break
          case 'show':
            raidFilterNew['l' + id].show = true
            break
          case 'small':
            raidFilterNew['l' + id].size = 'small'
            break
          case 'normal':
            raidFilterNew['l' + id].size = 'normal'
            break
          case 'large':
            raidFilterNew['l' + id].size = 'large'
            break
          case 'huge':
            raidFilterNew['l' + id].size = 'huge'
            break
        }
      } else if (type === 'raid-pokemon') {
        switch (info) {
          case 'hide':
            raidFilterNew['p' + id].show = false
            break
          case 'show':
            raidFilterNew['p' + id].show = true
            break
          case 'small':
            raidFilterNew['p' + id].size = 'small'
            break
          case 'normal':
            raidFilterNew['p' + id].size = 'normal'
            break
          case 'large':
            raidFilterNew['p' + id].size = 'large'
            break
          case 'huge':
            raidFilterNew['p' + id].size = 'huge'
            break
        }
      } else if (type === 'gym-team') {
        switch (info) {
          case 'hide':
            gymFilterNew['t' + id].show = false
            break
          case 'show':
            gymFilterNew['t' + id].show = true
            break
          case 'small':
            gymFilterNew['t' + id].size = 'small'
            break
          case 'normal':
            gymFilterNew['t' + id].size = 'normal'
            break
          case 'large':
            gymFilterNew['t' + id].size = 'large'
            break
          case 'huge':
            gymFilterNew['t' + id].size = 'huge'
            break
        }
      } else if (type === 'gym-ex') {
        switch (info) {
          case 'hide':
            gymFilterNew[id].show = false
            break
          case 'show':
            gymFilterNew[id].show = true
            break
          case 'small':
            gymFilterNew[id].size = 'small'
            break
          case 'normal':
            gymFilterNew[id].size = 'normal'
            break
          case 'large':
            gymFilterNew[id].size = 'large'
            break
          case 'huge':
            gymFilterNew[id].size = 'huge'
            break
        }
      } else if (type === 'gym-slots') {
        switch (info) {
          case 'hide':
            gymFilterNew['s' + id].show = false
            break
          case 'show':
            gymFilterNew['s' + id].show = true
            break
          case 'small':
            gymFilterNew['s' + id].size = 'small'
            break
          case 'normal':
            gymFilterNew['s' + id].size = 'normal'
            break
          case 'large':
            gymFilterNew['s' + id].size = 'large'
            break
          case 'huge':
            gymFilterNew['s' + id].size = 'huge'
            break
        }
      } else if (type === 'pokestop-normal') {
        switch (info) {
          case 'hide':
            pokestopFilterNew[id].show = false
            break
          case 'show':
            pokestopFilterNew[id].show = true
            break
          case 'small':
            pokestopFilterNew[id].size = 'small'
            break
          case 'normal':
            pokestopFilterNew[id].size = 'normal'
            break
          case 'large':
            pokestopFilterNew[id].size = 'large'
            break
          case 'huge':
            pokestopFilterNew[id].size = 'huge'
            break
        }
      } else if (type === 'pokestop-lure') {
        switch (info) {
          case 'hide':
            pokestopFilterNew['l' + id].show = false
            break
          case 'show':
            pokestopFilterNew['l' + id].show = true
            break
          case 'small':
            pokestopFilterNew['l' + id].size = 'small'
            break
          case 'normal':
            pokestopFilterNew['l' + id].size = 'normal'
            break
          case 'large':
            pokestopFilterNew['l' + id].size = 'large'
            break
          case 'huge':
            pokestopFilterNew['l' + id].size = 'huge'
            break
        }
      } else if (type === 'pokestop-invasion') {
        switch (info) {
          case 'hide':
            pokestopFilterNew[id].show = false
            break
          case 'show':
            pokestopFilterNew[id].show = true
            break
          case 'small':
            pokestopFilterNew[id].size = 'small'
            break
          case 'normal':
            pokestopFilterNew[id].size = 'normal'
            break
          case 'large':
            pokestopFilterNew[id].size = 'large'
            break
          case 'huge':
            pokestopFilterNew[id].size = 'huge'
            break
        }
      } else if (type === 'spawnpoint-timer') {
        switch (info) {
          case 'hide':
            spawnpointFilterNew[id].show = false
            break
          case 'show':
            spawnpointFilterNew[id].show = true
            break
          case 'small':
            spawnpointFilterNew[id].size = 'small'
            break
          case 'normal':
            spawnpointFilterNew[id].size = 'normal'
            break
          case 'large':
            spawnpointFilterNew[id].size = 'large'
            break
          case 'huge':
            spawnpointFilterNew[id].size = 'huge'
            break
        }
      }
    })
  }
}

function manageConfigureButton (e, isNew) {
  const id = e.attr('data-id')
  const type = e.attr('data-type')
  const info = e.attr('data-info')

  if (isNew) {
    e.removeClass('configure-button-new')
    e.addClass('configure-button')
    e.on('click', function (e) {
      e.preventDefault()
      if (type === 'pokemon-iv') {
        switch (info) {
          case 'global-iv':
            return manageGlobalIVPopup(id, pokemonFilterNew)
        }
      }
    })
  }
}

function getTimeUntill (date) {
  const diff = Math.round((date - new Date()) / 1000)
  if (diff < 0) {
    return 'expired'
  }

  const h = Math.floor(diff / 3600)
  const m = Math.floor(diff % 3600 / 60)
  const s = Math.floor(diff % 3600 % 60)

  var str = ''
  if (h > 0) {
    str = h + 'h ' + m + 'm ' + s + 's'
  } else if (m > 0) {
    str = m + 'm ' + s + 's'
  } else {
    str = s + 's'
  }

  return str
}

function getTimeSince (date) {
  const diff = Math.round((new Date() - date) / 1000)
  const h = Math.floor(diff / 3600)
  const m = Math.floor(diff % 3600 / 60)
  const s = Math.floor(diff % 3600 % 60)

  var str = ''
  if (h > 0) {
    str = h + 'h ' + m + 'm ' + s + 's'
  } else if (m > 0) {
    str = m + 'm ' + s + 's'
  } else {
    str = s + 's'
  }

  return str
}

function manageIVPopup (id, filter) {
  const result = prompt('Please enter a IV Filter', filter[id].filter).toUpperCase()
  const prevShow = filter[id].show
  let success
  if (result == null) {
    success = false
  } else if (checkIVFilterValid(result)) {
    filter[id].show = 'filter'
    filter[id].filter = result
    success = true
  } else {
    success = false
    alert('Invalid IV Filter!')
  }
  if (!success) {
    if (prevShow === true) {
      $('.select-button[data-id="' + id + '"][data-info="show"]').addClass('active')
    } else if (prevShow === false) {
      $('.select-button[data-id="' + id + '"][data-info="hide"]').addClass('active')
    }
  }
  return success
}

function manageGlobalIVPopup (id, filter) {
  const result = prompt('Please enter a IV Filter', filter['iv_' + id].filter)
  if (result == null) {
    return false
  } else if (checkIVFilterValid(result)) {
    filter['iv_' + id].filter = result
    return true
  } else {
    alert('Invalid IV Filter!')
    return false
  }
}

function checkIVFilterValid (filter) {
  return filter.replace(/\s/g, '').match(/^(?!&&|\|\|)((\|\||&&)?\(?((A|D|S|L)?[0-9.]+(-(A|D|S|L)?[0-9.]+)?)\)?)*$/g)
}

function getLureIconId (lureId) {
  // return lureId - 500;
  switch (lureId) {
    // case 501:
    //    return 1;
    case 502:
      return 2
    case 503:
      return 3
    case 504:
      return 4
  }
  return 1
}

function getSize (size) {
  if (size < 1.5) return 'Tiny'
  if (size <= 1.75) return 'Small'
  if (size < 2.25) return 'Normal'
  if (size <= 2.5) return 'Large'
  return 'Big'
}

function getPokemonIdIconString(pokemonId, pokemonForm) {
  let pokemonIdString
  if (pokemonForm !== 0 && pokemonForm !== null) {
    const pokemonIdStringTmp = '' + pokemonId + '-' + pokemonForm
    if ($.inArray(pokemonIdStringTmp, avilableForms) !== -1) {
      pokemonIdString = pokemonIdStringTmp
    } else {
      pokemonIdString = '' + pokemonId
    }
  } else {
    pokemonIdString = '' + pokemonId
  }
  return pokemonIdString
}

function getPokemonIconString(pokemonId, pokemonForm, greatLeague, ultraLeague) {
  let pokemonIdString = getPokemonIdIconString(pokemonId, pokemonForm)
  if (pokemonForm !== 0 && pokemonForm !== null) {
    const pokemonIdStringTmp = '' + pokemonId + '-' + pokemonForm
    if ($.inArray(pokemonIdStringTmp, avilableForms) !== -1) {
      pokemonIdString = pokemonIdStringTmp
    } else {
      pokemonIdString = '' + pokemonId
    }
  } else {
    pokemonIdString = '' + pokemonId
  }
  let pre
  let post
  if (greatLeague === null || ultraLeague === null) {
    pre = 'pokemon/'
    post = '.png'
  } else {
    let bestRank = 4
    $.each(greatLeague, function (index, ranking) {
      if (ranking.rank !== null && ranking.rank < bestRank) {
        bestRank = ranking.rank
      }
    })
    $.each(ultraLeague, function (index, ranking) {
      if (ranking.rank !== null && ranking.rank < bestRank) {
        bestRank = ranking.rank
      }
    })
    if (bestRank <= 3) {
      pre = 'pokemon_league/'
      post = '_' + bestRank +'.png'
    } else {
      pre = 'pokemon/'
      post = '.png'
    }
  }
  return pre + pokemonIdString + post
}

// MARK: - Init Filter

function loadPokemonFilter () {
  const scrollHeight = $(document).height() * 0.5
  const table = $('#table-filter-pokemon').DataTable({
    language: {
      search: i18n('filter_table_search'),
      emptyTable: i18n('filter_pokemon_table_empty'),
      zeroRecords: i18n('filter_pokemon_table_empty')
    },
    rowGroup: {
      dataSrc: 'type'
    },
    autoWidth: false,
    columns: [
      { data: 'image', width: '5%', className: 'details-control', responsivePriority: 1 },
      { data: 'name', width: '15%', responsivePriority: 4 },
      {
        data: {
          _: 'id.formatted',
          sort: 'id.sort'
        },
        width: '5%',
        responsivePriority: 5
      },
      { data: 'filter', responsivePriority: 2 },
      { data: 'size', responsivePriority: 3 }
    ],
    ajax: {
      url: '/api/get_data?show_pokemon_filter=true',
      dataSrc: 'data.pokemon_filters'
    },
    info: false,
    order: [[2, 'asc']],
    'search.caseInsensitive': true,
    columnDefs: [{
      targets: [0, 3, 4],
      orderable: false
    }, {
      type: 'num',
      targets: 2
    }],
    deferRender: true,
    scrollY: scrollHeight,
    scrollCollapse: false,
    scroller: true,
    lengthChange: false,
    dom: 'lfrti',
    drawCallback: function () {
      $('.lazy_load').each(function () {
        var img = $(this)
        img.removeClass('lazy_load')
        img.attr('src', img.data('src'))
      })

      $('.select-button-new').each(function () {
        manageSelectButton($(this), true)
      })
      $('.configure-button-new').each(function () {
        manageConfigureButton($(this), true)
      })
    },
    responsive: true
  })

  $('#table-filter-pokemon tbody').on('click', 'td.details-control', function () {
    $('.select-button-new').each(function () {
      manageSelectButton($(this), true)
    })
    $('.configure-button-new').each(function () {
      manageConfigureButton($(this), true)
    })
  })

  table.on('search.dt', function () {
    $('tr').each(function () {
      var tr = $(this).closest('tr')
      var row = table.row(tr)
      if (row.child.isShown()) {
        row.child.hide()
        tr.removeClass('parent')
      }
    })
  })

  $('#filterPokemonModal').on('shown.bs.modal', function () {
    const dataTable = $('#table-filter-pokemon').DataTable()
    dataTable.responsive.recalc()
    dataTable.columns.adjust()
  })
}

function loadQuestFilter () {
  const scrollHeight = $(document).height() * 0.5
  const table = $('#table-filter-quest').DataTable({
    language: {
      search: i18n('filter_table_search'),
      emptyTable: i18n('filter_quest_table_empty'),
      zeroRecords: i18n('filter_quest_table_empty')
    },
    rowGroup: {
      dataSrc: 'type'
    },
    autoWidth: false,
    columns: [
      { data: 'image', width: '5%', className: 'details-control', responsivePriority: 1 },
      { data: 'name', width: '15%', responsivePriority: 4 },
      {
        data: {
          _: 'id.formatted',
          sort: 'id.sort'
        },
        width: '5%',
        responsivePriority: 5
      },
      { data: 'filter', responsivePriority: 2 },
      { data: 'size', responsivePriority: 3 }
    ],
    ajax: {
      url: '/api/get_data?show_quest_filter=true',
      dataSrc: 'data.quest_filters'
    },
    info: false,
    order: [[2, 'asc']],
    'search.caseInsensitive': true,
    columnDefs: [{
      targets: [0, 3, 4],
      orderable: false
    }, {
      type: 'num',
      targets: 2
    }],
    deferRender: true,
    scrollY: scrollHeight,
    scrollCollapse: false,
    scroller: true,
    lengthChange: false,
    dom: 'lfrti',
    drawCallback: function () {
      $('.lazy_load').each(function () {
        var img = $(this)
        img.removeClass('lazy_load')
        img.attr('src', img.data('src'))
      })

      $('.select-button-new').each(function () {
        manageSelectButton($(this), true)
      })
      $('.configure-button-new').each(function () {
        manageConfigureButton($(this), true)
      })
    },
    responsive: true
  })

  $('#table-filter-quest tbody').on('click', 'td.details-control', function () {
    $('.select-button-new').each(function () {
      manageSelectButton($(this), true)
    })
    $('.configure-button-new').each(function () {
      manageConfigureButton($(this), true)
    })
  })

  table.on('search.dt', function () {
    $('tr').each(function () {
      var tr = $(this).closest('tr')
      var row = table.row(tr)
      if (row.child.isShown()) {
        row.child.hide()
        tr.removeClass('parent')
      }
    })
  })

  $('#filterQuestModal').on('shown.bs.modal', function () {
    const dataTable = $('#table-filter-quest').DataTable()
    dataTable.responsive.recalc()
    dataTable.columns.adjust()
  })
}

function loadRaidFilter () {
  const scrollHeight = $(document).height() * 0.5
  const table = $('#table-filter-raid').DataTable({
    language: {
      search: i18n('filter_table_search'),
      emptyTable: i18n('filter_raid_table_empty'),
      zeroRecords: i18n('filter_raid_table_empty')
    },
    rowGroup: {
      dataSrc: 'type'
    },
    autoWidth: false,
    columns: [
      { data: 'image', width: '5%', className: 'details-control', responsivePriority: 1 },
      { data: 'name', width: '15%', responsivePriority: 4 },
      {
        data: {
          _: 'id.formatted',
          sort: 'id.sort'
        },
        width: '5%',
        responsivePriority: 5
      },
      { data: 'filter', responsivePriority: 2 },
      { data: 'size', responsivePriority: 3 }
    ],
    ajax: {
      url: '/api/get_data?show_raid_filter=true',
      dataSrc: 'data.raid_filters'
    },
    info: false,
    order: [[2, 'asc']],
    'search.caseInsensitive': true,
    columnDefs: [{
      targets: [0, 3, 4],
      orderable: false
    }, {
      type: 'num',
      targets: 2
    }],
    deferRender: true,
    scrollY: scrollHeight,
    scrollCollapse: false,
    scroller: true,
    lengthChange: false,
    dom: 'lfrti',
    drawCallback: function () {
      $('.lazy_load').each(function () {
        var img = $(this)
        img.removeClass('lazy_load')
        img.attr('src', img.data('src'))
      })

      $('.select-button-new').each(function () {
        manageSelectButton($(this), true)
      })
      $('.configure-button-new').each(function () {
        manageConfigureButton($(this), true)
      })
    },
    responsive: true
  })

  $('#table-filter-raid tbody').on('click', 'td.details-control', function () {
    $('.select-button-new').each(function () {
      manageSelectButton($(this), true)
    })
    $('.configure-button-new').each(function () {
      manageConfigureButton($(this), true)
    })
  })

  table.on('search.dt', function () {
    $('tr').each(function () {
      var tr = $(this).closest('tr')
      var row = table.row(tr)
      if (row.child.isShown()) {
        row.child.hide()
        tr.removeClass('parent')
      }
    })
  })

  $('#filterRaidModal').on('shown.bs.modal', function () {
    const dataTable = $('#table-filter-raid').DataTable()
    dataTable.responsive.recalc()
    dataTable.columns.adjust()
  })
}

function loadGymFilter () {
  const scrollHeight = $(document).height() * 0.5
  const table = $('#table-filter-gym').DataTable({
    language: {
      search: i18n('filter_table_search'),
      emptyTable: i18n('filter_gym_table_empty'),
      zeroRecords: i18n('filter_gym_table_empty')
    },
    rowGroup: {
      dataSrc: 'type'
    },
    autoWidth: false,
    columns: [
      { data: 'image', width: '5%', className: 'details-control', responsivePriority: 1 },
      { data: 'name', width: '15%', responsivePriority: 4 },
      {
        data: {
          _: 'id.formatted',
          sort: 'id.sort'
        },
        width: '5%',
        responsivePriority: 5
      },
      { data: 'filter', responsivePriority: 2 },
      { data: 'size', responsivePriority: 3 }
    ],
    ajax: {
      url: '/api/get_data?show_gym_filter=true',
      dataSrc: 'data.gym_filters'
    },
    info: false,
    order: [[2, 'asc']],
    'search.caseInsensitive': true,
    columnDefs: [{
      targets: [0, 3, 4],
      orderable: false
    }, {
      type: 'num',
      targets: 2
    }],
    deferRender: true,
    scrollY: scrollHeight,
    scrollCollapse: false,
    scroller: true,
    lengthChange: false,
    dom: 'lfrti',
    drawCallback: function () {
      $('.lazy_load').each(function () {
        var img = $(this)
        img.removeClass('lazy_load')
        img.attr('src', img.data('src'))
      })

      $('.select-button-new').each(function () {
        manageSelectButton($(this), true)
      })
      $('.configure-button-new').each(function () {
        manageConfigureButton($(this), true)
      })
    },
    responsive: true
  })

  $('#table-filter-gym tbody').on('click', 'td.details-control', function () {
    $('.select-button-new').each(function () {
      manageSelectButton($(this), true)
    })
    $('.configure-button-new').each(function () {
      manageConfigureButton($(this), true)
    })
  })

  table.on('search.dt', function () {
    $('tr').each(function () {
      var tr = $(this).closest('tr')
      var row = table.row(tr)
      if (row.child.isShown()) {
        row.child.hide()
        tr.removeClass('parent')
      }
    })
  })

  $('#filterGymModal').on('shown.bs.modal', function () {
    const dataTable = $('#table-filter-gym').DataTable()
    dataTable.responsive.recalc()
    dataTable.columns.adjust()
  })
}

function loadPokestopFilter () {
  const scrollHeight = $(document).height() * 0.5
  const table = $('#table-filter-pokestop').DataTable({
    language: {
      search: i18n('filter_table_search'),
      emptyTable: i18n('filter_pokestop_table_empty'),
      zeroRecords: i18n('filter_pokestop_table_empty')
    },
    rowGroup: {
      dataSrc: 'type'
    },
    autoWidth: false,
    columns: [
      { data: 'image', width: '5%', className: 'details-control', responsivePriority: 1 },
      { data: 'name', width: '15%', responsivePriority: 4 },
      {
        data: {
          _: 'id.formatted',
          sort: 'id.sort'
        },
        width: '5%',
        responsivePriority: 5
      },
      { data: 'filter', responsivePriority: 2 },
      { data: 'size', responsivePriority: 3 }
    ],
    ajax: {
      url: '/api/get_data?show_pokestop_filter=true',
      dataSrc: 'data.pokestop_filters'
    },
    info: false,
    order: [[2, 'asc']],
    'search.caseInsensitive': true,
    columnDefs: [{
      targets: [0, 3, 4],
      orderable: false
    }, {
      type: 'num',
      targets: 2
    }],
    deferRender: true,
    scrollY: scrollHeight,
    scrollCollapse: false,
    scroller: true,
    lengthChange: false,
    dom: 'lfrti',
    drawCallback: function () {
      $('.lazy_load').each(function () {
        var img = $(this)
        img.removeClass('lazy_load')
        img.attr('src', img.data('src'))
      })

      $('.select-button-new').each(function () {
        manageSelectButton($(this), true)
      })
      $('.configure-button-new').each(function () {
        manageConfigureButton($(this), true)
      })
    },
    responsive: true
  })

  $('#table-filter-pokestop tbody').on('click', 'td.details-control', function () {
    $('.select-button-new').each(function () {
      manageSelectButton($(this), true)
    })
    $('.configure-button-new').each(function () {
      manageConfigureButton($(this), true)
    })
  })

  table.on('search.dt', function () {
    $('tr').each(function () {
      var tr = $(this).closest('tr')
      var row = table.row(tr)
      if (row.child.isShown()) {
        row.child.hide()
        tr.removeClass('parent')
      }
    })
  })

  $('#filterPokestopModal').on('shown.bs.modal', function () {
    const dataTable = $('#table-filter-pokestop').DataTable()
    dataTable.responsive.recalc()
    dataTable.columns.adjust()
  })
}

function loadSpawnpointFilter () {
  const scrollHeight = $(document).height() * 0.5
  const table = $('#table-filter-spawnpoint').DataTable({
    language: {
      search: i18n('filter_table_search'),
      emptyTable: i18n('filter_spawnpoint_table_empty'),
      zeroRecords: i18n('filter_spawnpoint_table_empty')
    },
    rowGroup: {
      dataSrc: 'type'
    },
    autoWidth: false,
    columns: [
      { data: 'image', width: '5%', className: 'details-control', responsivePriority: 1 },
      { data: 'name', width: '15%', responsivePriority: 4 },
      {
        data: {
          _: 'id.formatted',
          sort: 'id.sort'
        },
        width: '5%',
        responsivePriority: 5
      },
      { data: 'filter', responsivePriority: 2 },
      { data: 'size', responsivePriority: 3 }
    ],
    ajax: {
      url: '/api/get_data?show_spawnpoint_filter=true',
      dataSrc: 'data.spawnpoint_filters'
    },
    info: false,
    order: [[2, 'asc']],
    'search.caseInsensitive': true,
    columnDefs: [{
      targets: [0, 3, 4],
      orderable: false
    }, {
      type: 'num',
      targets: 2
    }],
    deferRender: true,
    scrollY: scrollHeight,
    scrollCollapse: false,
    scroller: true,
    lengthChange: false,
    dom: 'lfrti',
    drawCallback: function () {
      $('.lazy_load').each(function () {
        var img = $(this)
        img.removeClass('lazy_load')
        img.attr('src', img.data('src'))
      })

      $('.select-button-new').each(function () {
        manageSelectButton($(this), true)
      })
      $('.configure-button-new').each(function () {
        manageConfigureButton($(this), true)
      })
    },
    responsive: true
  })

  $('#table-filter-spawnpoint tbody').on('click', 'td.details-control', function () {
    $('.select-button-new').each(function () {
      manageSelectButton($(this), true)
    })
    $('.configure-button-new').each(function () {
      manageConfigureButton($(this), true)
    })
  })

  table.on('search.dt', function () {
    $('tr').each(function () {
      var tr = $(this).closest('tr')
      var row = table.row(tr)
      if (row.child.isShown()) {
        row.child.hide()
        tr.removeClass('parent')
      }
    })
  })

  $('#filterSpawnpointModal').on('shown.bs.modal', function () {
    const dataTable = $('#table-filter-spawnpoint').DataTable()
    dataTable.responsive.recalc()
    dataTable.columns.adjust()
  })
}

function loadFilterSettings (e) {
  var file = e.target.files[0]
  if (!file) {
    return
  }
  var reader = new FileReader()
  reader.onload = function (file) {
    var contents = file.target.result
    var obj = JSON.parse(contents)

    showGyms = obj.show_gyms
    gymFilterNew = obj.gym
    store('show_gyms', showGyms)
    store('gym_filter', JSON.stringify(gymFilterNew))

    showRaids = obj.show_raids
    raidFilterNew = obj.raid
    store('show_raids', showRaids)
    store('raid_filter', JSON.stringify(raidFilterNew))

    showPokemon = obj.show_pokemon
    pokemonFilterNew = obj.pokemon
    store('show_pokemon', showRaids)
    store('pokemon_filter', JSON.stringify(pokemonFilterNew))

    showQuests = obj.show_quests
    questFilterNew = obj.quest
    store('show_quests', showRaids)
    store('quest_filter', JSON.stringify(questFilterNew))

    showPokestops = obj.show_pokestops
    pokestopFilterNew = obj.pokestop
    store('show_pokestops', showPokestops)
    store('pokestop_filter', JSON.stringify(pokestopFilterNew))

    showSpawnpoints = obj.show_spawnpoints
    spawnpointFilterNew = obj.spawnpoint
    store('show_spawnpoints', showSpawnpoints)
    store('spawnpoint_filter', JSON.stringify(spawnpointFilterNew))

    showCells = obj.show_cells
    store('show_cells', showCells)

    showSubmissionCells = obj.show_submission_cells
    store('show_submission_cells"', showSubmissionCells)

    showWeathers = obj.show_weathers
    store('show_weathers', showWeathers)

    if (showGyms) {
      $('#show-gyms').addClass('active')
      $('#hide-gyms').removeClass('active')
    } else {
      $('#hide-gyms').addClass('active')
      $('#show-gyms').removeClass('active')
    }

    if (showRaids) {
      $('#show-raids').addClass('active')
      $('#hide-raids').removeClass('active')
    } else {
      $('#hide-raids').addClass('active')
      $('#show-raids').removeClass('active')
    }

    if (showPokestops) {
      $('#show-pokestops').addClass('active')
      $('#hide-pokestops').removeClass('active')
    } else {
      $('#hide-pokestops').addClass('active')
      $('#show-pokestops').removeClass('active')
    }

    if (showQuests) {
      $('#show-quests').addClass('active')
      $('#hide-quests').removeClass('active')
    } else {
      $('#hide-quests').addClass('active')
      $('#show-quests').removeClass('active')
    }

    if (showPokemon) {
      $('#show-pokemon').addClass('active')
      $('#hide-pokemon').removeClass('active')
    } else {
      $('#hide-pokemon').addClass('active')
      $('#show-pokemon').removeClass('active')
    }

    if (showSpawnpoints) {
      $('#show-spawnpoints').addClass('active')
      $('#hide-spawnpoints').removeClass('active')
    } else {
      $('#hide-spawnpoints').addClass('active')
      $('#show-spawnpoints').removeClass('active')
    }

    if (showCells) {
      $('#show-cells').addClass('active')
      $('#hide-cells').removeClass('active')
    } else {
      $('#hide-cells').addClass('active')
      $('#show-cells').removeClass('active')
    }

    if (showSubmissionCells) {
      $('#show-submission-cells').addClass('active')
      $('#hide-submission-cells').removeClass('active')
    } else {
      $('#hide-submission-cells').addClass('active')
      $('#show-submission-cells').removeClass('active')
    }

    if (showWeathers) {
      $('#show-weathers').addClass('active')
      $('#hide-weathers').removeClass('active')
    } else {
      $('#hide-weathers').addClass('active')
      $('#show-weathers').removeClass('active')
    }

    $('#table-filter-pokemon').DataTable().rows().invalidate('data').draw(false)
    $('#table-filter-raid').DataTable().rows().invalidate('data').draw(false)
    $('#table-filter-gym').DataTable().rows().invalidate('data').draw(false)
    $('#table-filter-pokestop').DataTable().rows().invalidate('data').draw(false)
    $('#table-filter-quest').DataTable().rows().invalidate('data').draw(false)
    $('#table-filter-spawnpoint').DataTable().rows().invalidate('data').draw(false)
  }
  reader.readAsText(file)
}

// eslint-disable-next-line no-unused-vars
function toggleGreatLeague() {
  showGreatLeague = !showGreatLeague
  store('show_great_league', showGreatLeague)
  if (openedPokemon !== undefined) {
    openedPokemon.marker._popup.setContent(getPokemonPopupContent(openedPokemon))
  }
}

// eslint-disable-next-line no-unused-vars
function toggleUltraLeague() {
  showUltraLeague = !showUltraLeague
  store('show_ultra_league', showUltraLeague)
  if (openedPokemon !== undefined) {
    openedPokemon.marker._popup.setContent(getPokemonPopupContent(openedPokemon))
  }
}
